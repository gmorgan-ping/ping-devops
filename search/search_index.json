{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"3rdPartySoftware/","text":"Third-Party Software \u00b6 Ping Identity Docker images bundle various third-party tools to enable product functionality. Review the following list for references: OpenJDK . GNU General Public License version 2.0. OpenSSH . Based on BSD licensing. Git . GNU General Public License version 2.0. Gettext . GNU General Public License version 2.0. Curl . Based on MIT/X license. ca-certificates . GNU General Public License version 2.0. Jq . MIT licensing. Gnupg . GNU General Public License.","title":"Third-Party Software"},{"location":"3rdPartySoftware/#third-party-software","text":"Ping Identity Docker images bundle various third-party tools to enable product functionality. Review the following list for references: OpenJDK . GNU General Public License version 2.0. OpenSSH . Based on BSD licensing. Git . GNU General Public License version 2.0. Gettext . GNU General Public License version 2.0. Curl . Based on MIT/X license. ca-certificates . GNU General Public License version 2.0. Jq . MIT licensing. Gnupg . GNU General Public License.","title":"Third-Party Software"},{"location":"contributing/","text":"Contributing \u00b6 Thanks for taking the time to contribute! How Can I Contribute? \u00b6 Reporting Bugs \u00b6 How Do I Submit a Bug Report? \u00b6 Bugs are tracked as GitHub Issues . You can report a bug by submitting an issue in the Ping Identity DevOps Issue Tracker . To help the maintainers understand and reproduce the problem, please provide information such as: A clear and descriptive title. A description of what happened and a description of what you expected to happen. An example with the exact steps needed to reproduce the problem. If relevant, provide sample code. Please understand that bug reports are reviewed and prioritized internally, and we might not be able to address all bug reports or provide an estimated time for resolution. Suggesting Enhancements \u00b6 As with bugs, requests are tracked as GitHub Issues . You can suggest an enhancement by submitting an issue in the Ping Identity DevOps Issue Tracker . Please understand that enhancement requests are reviewed and prioritized internally, and we might not be able to address all requests or provide an estimated time for resolution. Alternate Routes for Submitting Bugs and Suggesting Enhancements \u00b6 If you would rather not have your issue discussed on the public repository, you can open an issue from Ping Identity's Support Portal . Contributing Code Changes \u00b6 Ping Identity does not accept third-party code submissions.","title":"Contributing"},{"location":"contributing/#contributing","text":"Thanks for taking the time to contribute!","title":"Contributing"},{"location":"contributing/#how-can-i-contribute","text":"","title":"How Can I Contribute?"},{"location":"contributing/#reporting-bugs","text":"","title":"Reporting Bugs"},{"location":"contributing/#how-do-i-submit-a-bug-report","text":"Bugs are tracked as GitHub Issues . You can report a bug by submitting an issue in the Ping Identity DevOps Issue Tracker . To help the maintainers understand and reproduce the problem, please provide information such as: A clear and descriptive title. A description of what happened and a description of what you expected to happen. An example with the exact steps needed to reproduce the problem. If relevant, provide sample code. Please understand that bug reports are reviewed and prioritized internally, and we might not be able to address all bug reports or provide an estimated time for resolution.","title":"How Do I Submit a Bug Report?"},{"location":"contributing/#suggesting-enhancements","text":"As with bugs, requests are tracked as GitHub Issues . You can suggest an enhancement by submitting an issue in the Ping Identity DevOps Issue Tracker . Please understand that enhancement requests are reviewed and prioritized internally, and we might not be able to address all requests or provide an estimated time for resolution.","title":"Suggesting Enhancements"},{"location":"contributing/#alternate-routes-for-submitting-bugs-and-suggesting-enhancements","text":"If you would rather not have your issue discussed on the public repository, you can open an issue from Ping Identity's Support Portal .","title":"Alternate Routes for Submitting Bugs and Suggesting Enhancements"},{"location":"contributing/#contributing-code-changes","text":"Ping Identity does not accept third-party code submissions.","title":"Contributing Code Changes"},{"location":"disclaimer/","text":"Disclaimer \u00b6 Copyright (C) 2021 Ping Identity Corporation All rights reserved. Ping Identity Corporation 1099 18th St Suite 2950 Denver, CO 80202 303.468.2900 http://www.pingidentity.com Disclaimer Of Warranties \u00b6 THE SOFTWARE PROVIDED HEREUNDER IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT ANY WARRANTIES OR REPRESENTATIONS EXPRESS, IMPLIED OR STATUTORY; INCLUDING, WITHOUT LIMITATION, WARRANTIES OF QUALITY, PERFORMANCE, NONINFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. NOR ARE THERE ANY WARRANTIES CREATED BY A COURSE OR DEALING, COURSE OF PERFORMANCE OR TRADE USAGE. FURTHERMORE, THERE ARE NO WARRANTIES THAT THE SOFTWARE WILL MEET YOUR NEEDS OR BE FREE FROM ERRORS, OR THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Disclaimer"},{"location":"disclaimer/#disclaimer","text":"Copyright (C) 2021 Ping Identity Corporation All rights reserved. Ping Identity Corporation 1099 18th St Suite 2950 Denver, CO 80202 303.468.2900 http://www.pingidentity.com","title":"Disclaimer"},{"location":"disclaimer/#disclaimer-of-warranties","text":"THE SOFTWARE PROVIDED HEREUNDER IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT ANY WARRANTIES OR REPRESENTATIONS EXPRESS, IMPLIED OR STATUTORY; INCLUDING, WITHOUT LIMITATION, WARRANTIES OF QUALITY, PERFORMANCE, NONINFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. NOR ARE THERE ANY WARRANTIES CREATED BY A COURSE OR DEALING, COURSE OF PERFORMANCE OR TRADE USAGE. FURTHERMORE, THERE ARE NO WARRANTIES THAT THE SOFTWARE WILL MEET YOUR NEEDS OR BE FREE FROM ERRORS, OR THAT THE OPERATION OF THE SOFTWARE WILL BE UNINTERRUPTED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Disclaimer Of Warranties"},{"location":"license/","text":"License \u00b6 Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 Ping Identity Corp. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"license/#license","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright 2021 Ping Identity Corp. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"overview/","text":"Overview \u00b6 The DevOps resources include Docker images of Ping Identity products, deployment examples, and configuration management tools. When you're ready, begin with our Get Started guide. Our documentation will help set you up and familiarize you with the use of the resources. DevOps Docker Images \u00b6 Docker Images Docker Builds We make available preconfigured Docker images of our products in Docker containers. Each of our containers is a complete working product instance, immediately usable when deployed. Our Docker stacks are integrated collections of these containers, preconfigured to interoperate with the containers in the stack. You can find information about our available Docker images in the pingidentity-docker-builds repository or on our Docker Hub site. The Docker images are automatically pulled from our repository the first time you deploy a product container or orchestrated set of containers. Alternatively, you can pull the images from our Docker Hub site. Deployment Examples \u00b6 DevOps Getting Started We supply examples for deploying our products as standalone containers, as a Docker Compose stack, or as an orchestrated set using Kubernetes. Use Docker Compose for development, demonstrations, and lightweight orchestration. Use Kubernetes for enterprise-level orchestration. Configuration Management \u00b6 For configuration management, we use: Server profiles, for runtime configuration of containers. YAML files for runtime configuration of stacks. YAML file configuration settings complement that used for server profiles. Environment variables. These can be included in YAML files or called from external files. Shell scripts (hooks) to automate certain operations for a product. Release tags to give you a choice between stable builds or the current (potentially unstable) builds. By default, our Docker images run as unprivileged within the container.","title":"Overview"},{"location":"overview/#overview","text":"The DevOps resources include Docker images of Ping Identity products, deployment examples, and configuration management tools. When you're ready, begin with our Get Started guide. Our documentation will help set you up and familiarize you with the use of the resources.","title":"Overview"},{"location":"overview/#devops-docker-images","text":"Docker Images Docker Builds We make available preconfigured Docker images of our products in Docker containers. Each of our containers is a complete working product instance, immediately usable when deployed. Our Docker stacks are integrated collections of these containers, preconfigured to interoperate with the containers in the stack. You can find information about our available Docker images in the pingidentity-docker-builds repository or on our Docker Hub site. The Docker images are automatically pulled from our repository the first time you deploy a product container or orchestrated set of containers. Alternatively, you can pull the images from our Docker Hub site.","title":"DevOps Docker Images"},{"location":"overview/#deployment-examples","text":"DevOps Getting Started We supply examples for deploying our products as standalone containers, as a Docker Compose stack, or as an orchestrated set using Kubernetes. Use Docker Compose for development, demonstrations, and lightweight orchestration. Use Kubernetes for enterprise-level orchestration.","title":"Deployment Examples"},{"location":"overview/#configuration-management","text":"For configuration management, we use: Server profiles, for runtime configuration of containers. YAML files for runtime configuration of stacks. YAML file configuration settings complement that used for server profiles. Environment variables. These can be included in YAML files or called from external files. Shell scripts (hooks) to automate certain operations for a product. Release tags to give you a choice between stable builds or the current (potentially unstable) builds. By default, our Docker images run as unprivileged within the container.","title":"Configuration Management"},{"location":"readme/","text":"HOME","title":"Home"},{"location":"deployment/collectMetricsWithSplunk/","text":"Capturing Logs and Metrics using Splunk \u00b6 In this example, you'll forward PingFederate, PingAccess and PingDirectory logs and metrics to Splunk. Before you begin \u00b6 You must: Complete Get Started to set up your DevOps environment and run a test deployment of the products Create or have access to a Kubernetes cluster Create a Kubernetes secret using your DevOps credentials. For more information, see Using your DevOps user and key Add the Ping Identity Helm repo Helm chart version 0.6.4 or greater Optional: Ingress: The supplied ingress deployment yaml may not work in all environments and will need modification (hostname, type etc) to function properly within your cluster. Deployed Components \u00b6 PingIdentity PingFederate PingAccess PingDirectory Splunk Splunk deployment Splunk Universal Forwarder Optional Ingress References \u00b6 This example was created using the follow resource documentation PingFederate Logs formatting for Splunk PingFederate Dashboard reference Splunk Universal Forwarder in Kubernetes Logging in Kubernetes Using Splunk About this task \u00b6 You will: Deploy Splunk Enterprise Create configs in Splunk Create and use an HTTP Event Collector (HEC) token Create a ConfigMap that contains Splunk Universal Forwarder (UF) configuration Deploy PingFederate, PingAccess, and PingDirectory using Helm with Splunk's Universal Forwarder (UF) as a Sidecar Deploying the example \u00b6 Deployment files Source deployment files are located in Ping Identity's DevOps Getting Started repo Deploy Splunk using the provided YAML file kubectl apply -f splunk/splunk.yaml (Optional) Add Ingress to Splunk deployment. To add the ingress, modify the splunk/ingress.yaml file with your host, tls and Ingress annotations. Once updated, apply. kubectl apply -f splunk/ingress.yaml In your Browser, navigate to your deployed instance of Splunk Create an index named pinglogs (settings->indexes) Create an HTTP Event Collector named pinglogs (settings->data inputs) Copy the HEC token as it will be required later Install the PingDirectory, PingFederate and PingAccess Splunk applications (apps->find more apps) Note: you will need a valid login to Splunk. Register here for a free account Update then deploy the splunk/splunk-config-init.yaml file with your HEC token from the previous step Example : ... [ httpout ] httpEventCollectorToken = c3538a15-f58d-2034-ef2d-76422828e03f ... kubectl apply -f splunk/splunk-config-init.yaml Deploy the Ping Identity products and Splunk Universal Forwarder sidecars using the supplied Helm values.yaml file Ingress Configuration Ingress is enabled within the values.yaml file. Specify your Ingress settings or disabled by editing the file Sever Profiles Information Ping products using baseline profile Splunk logs profile layer (log4j2.xml config) helm \\ upgrade --install \\ splunk-example \\ pingidentity/ping-devops \\ -f values.yaml Once the services are up and running you should start to see product logs available in Splunk To produce metrics for the installed applications, generate traffic. PingFederate: Use the engine's OAuthPlayground PingAccess: Use the /anything endpoint to login (user.0 / 2FederateM0re) PingDirectory: Use the searchrate, modrate and authrate tools within the pod","title":"Metrics/Logs - Splunk"},{"location":"deployment/collectMetricsWithSplunk/#capturing-logs-and-metrics-using-splunk","text":"In this example, you'll forward PingFederate, PingAccess and PingDirectory logs and metrics to Splunk.","title":"Capturing Logs and Metrics using Splunk"},{"location":"deployment/collectMetricsWithSplunk/#before-you-begin","text":"You must: Complete Get Started to set up your DevOps environment and run a test deployment of the products Create or have access to a Kubernetes cluster Create a Kubernetes secret using your DevOps credentials. For more information, see Using your DevOps user and key Add the Ping Identity Helm repo Helm chart version 0.6.4 or greater Optional: Ingress: The supplied ingress deployment yaml may not work in all environments and will need modification (hostname, type etc) to function properly within your cluster.","title":"Before you begin"},{"location":"deployment/collectMetricsWithSplunk/#deployed-components","text":"PingIdentity PingFederate PingAccess PingDirectory Splunk Splunk deployment Splunk Universal Forwarder Optional Ingress","title":"Deployed Components"},{"location":"deployment/collectMetricsWithSplunk/#references","text":"This example was created using the follow resource documentation PingFederate Logs formatting for Splunk PingFederate Dashboard reference Splunk Universal Forwarder in Kubernetes Logging in Kubernetes Using Splunk","title":"References"},{"location":"deployment/collectMetricsWithSplunk/#about-this-task","text":"You will: Deploy Splunk Enterprise Create configs in Splunk Create and use an HTTP Event Collector (HEC) token Create a ConfigMap that contains Splunk Universal Forwarder (UF) configuration Deploy PingFederate, PingAccess, and PingDirectory using Helm with Splunk's Universal Forwarder (UF) as a Sidecar","title":"About this task"},{"location":"deployment/collectMetricsWithSplunk/#deploying-the-example","text":"Deployment files Source deployment files are located in Ping Identity's DevOps Getting Started repo Deploy Splunk using the provided YAML file kubectl apply -f splunk/splunk.yaml (Optional) Add Ingress to Splunk deployment. To add the ingress, modify the splunk/ingress.yaml file with your host, tls and Ingress annotations. Once updated, apply. kubectl apply -f splunk/ingress.yaml In your Browser, navigate to your deployed instance of Splunk Create an index named pinglogs (settings->indexes) Create an HTTP Event Collector named pinglogs (settings->data inputs) Copy the HEC token as it will be required later Install the PingDirectory, PingFederate and PingAccess Splunk applications (apps->find more apps) Note: you will need a valid login to Splunk. Register here for a free account Update then deploy the splunk/splunk-config-init.yaml file with your HEC token from the previous step Example : ... [ httpout ] httpEventCollectorToken = c3538a15-f58d-2034-ef2d-76422828e03f ... kubectl apply -f splunk/splunk-config-init.yaml Deploy the Ping Identity products and Splunk Universal Forwarder sidecars using the supplied Helm values.yaml file Ingress Configuration Ingress is enabled within the values.yaml file. Specify your Ingress settings or disabled by editing the file Sever Profiles Information Ping products using baseline profile Splunk logs profile layer (log4j2.xml config) helm \\ upgrade --install \\ splunk-example \\ pingidentity/ping-devops \\ -f values.yaml Once the services are up and running you should start to see product logs available in Splunk To produce metrics for the installed applications, generate traffic. PingFederate: Use the engine's OAuthPlayground PingAccess: Use the /anything endpoint to login (user.0 / 2FederateM0re) PingDirectory: Use the searchrate, modrate and authrate tools within the pod","title":"Deploying the example"},{"location":"deployment/deploy/","text":"Orchestrate Deployments with Kubernetes \u00b6 Kubernetes and the Ping Identity Helm charts enable you to quickly deploy demo examples and build production scenarios. Use of this chart and feedback is highly encouraged. As such, the Ping DevOps Program will focus all new work on Kubernetes (provider agnostic) and Helm. Helm Charts Repo The Deployment topic provides guidance on common questions that arise when working towards a successful production deployment. Many sections in the Deployment topic can be read independently as needed, but there are some core concepts that are relevant to every deployment. As you read through this section you will find snippets of values.yaml code relevant to each topic. Your goal should be to compile any snippets that matter to you into your own, complete, values.yaml , this is covered further on Building values.yaml . Critical sections to consider: Core Concepts - relevant to every consumer Server Profiles Container Anatomy - Building values.yaml Operating Patterns - configuration management options per product. Topics like networking, disaster recovery, and secrets management depend on having a solid operating pattern.","title":"Introduction"},{"location":"deployment/deploy/#orchestrate-deployments-with-kubernetes","text":"Kubernetes and the Ping Identity Helm charts enable you to quickly deploy demo examples and build production scenarios. Use of this chart and feedback is highly encouraged. As such, the Ping DevOps Program will focus all new work on Kubernetes (provider agnostic) and Helm. Helm Charts Repo The Deployment topic provides guidance on common questions that arise when working towards a successful production deployment. Many sections in the Deployment topic can be read independently as needed, but there are some core concepts that are relevant to every deployment. As you read through this section you will find snippets of values.yaml code relevant to each topic. Your goal should be to compile any snippets that matter to you into your own, complete, values.yaml , this is covered further on Building values.yaml . Critical sections to consider: Core Concepts - relevant to every consumer Server Profiles Container Anatomy - Building values.yaml Operating Patterns - configuration management options per product. Topics like networking, disaster recovery, and secrets management depend on having a solid operating pattern.","title":"Orchestrate Deployments with Kubernetes"},{"location":"deployment/serverProfiles/","text":"Deployment \u00b6 Any configuration that is deployed with one of our product containers can be considered a \"server profile\". A profile typically looks like a set of files. You can use profiles in these ways: Pull at startup. Build into the image. Pull at startup \u00b6 Pass a Github-based URL and path as environment variables that point to a server profile. Pros: Easily sharable, inherently source-controlled Cons: Adds download time at container startup Dependency on external source control system For profiles pulled at startup, the image uses the following variables to clone the repo at startup and pull the profile into the container: SERVER_PROFILE_URL - The git URL with the server profile. SERVER_PROFILE_PATH - The location from the base of the URL with the specific server profile. This allows for several products server profile to be housed in the same git repo. SERVER_PROFILE_BRANCH (optional) - If other than the default branch (usually master or main), allows for specifying a different branch. Example might be a user's development branch before merging into master. Although there is additional customizable functionality, this is the most common way that profiles are provided to containers because it is easy to provide a known starting state as well as track changes over time. Build into the image \u00b6 Build your own image FROM one of our Docker images and copy the profile files in. This is a common case for production docker usage and environments where the container is not allowed to external calls. Pros: No outbound internet call required no download at container startup. Cons: Tedious to build images when making iterative changes Building a profile into the image is useful when you have no access to the Github repository or if you're often spinning containers up and down. For example, if you made a Dockerfile at this location: https://github.com/pingidentity/pingidentity-server-profiles/tree/master/baseline, the relevant entries might look similar to this: FROM: pingidentity/pingfederate:edge COPY pingfederate/. /opt/in/.","title":"Server Profile Deployment"},{"location":"deployment/serverProfiles/#deployment","text":"Any configuration that is deployed with one of our product containers can be considered a \"server profile\". A profile typically looks like a set of files. You can use profiles in these ways: Pull at startup. Build into the image.","title":"Deployment"},{"location":"deployment/serverProfiles/#pull-at-startup","text":"Pass a Github-based URL and path as environment variables that point to a server profile. Pros: Easily sharable, inherently source-controlled Cons: Adds download time at container startup Dependency on external source control system For profiles pulled at startup, the image uses the following variables to clone the repo at startup and pull the profile into the container: SERVER_PROFILE_URL - The git URL with the server profile. SERVER_PROFILE_PATH - The location from the base of the URL with the specific server profile. This allows for several products server profile to be housed in the same git repo. SERVER_PROFILE_BRANCH (optional) - If other than the default branch (usually master or main), allows for specifying a different branch. Example might be a user's development branch before merging into master. Although there is additional customizable functionality, this is the most common way that profiles are provided to containers because it is easy to provide a known starting state as well as track changes over time.","title":"Pull at startup"},{"location":"deployment/serverProfiles/#build-into-the-image","text":"Build your own image FROM one of our Docker images and copy the profile files in. This is a common case for production docker usage and environments where the container is not allowed to external calls. Pros: No outbound internet call required no download at container startup. Cons: Tedious to build images when making iterative changes Building a profile into the image is useful when you have no access to the Github repository or if you're often spinning containers up and down. For example, if you made a Dockerfile at this location: https://github.com/pingidentity/pingidentity-server-profiles/tree/master/baseline, the relevant entries might look similar to this: FROM: pingidentity/pingfederate:edge COPY pingfederate/. /opt/in/.","title":"Build into the image"},{"location":"getStarted/devopsRegistration/","text":"Ping Identity DevOps Registration \u00b6 Registering for Ping Identity's DevOps Program grants you credentials that, when supplied to product containers automatically, retrieve an evaluation license on startup. To register for the DevOps Program: Make sure you have a registered account with Ping Identity. If you're not sure, click the link to Sign On and follow the instructions. If you don't have an account, create one here . Otherwise, sign on. When signing on, select Support and Community in the Select Account list. After you're signed on, you're directed to your profile page . In the right-side menu, click REGISTER FOR DEVOPS PROGRAM . You'll receive a confirmation message, and your credentials will be forwarded to the email address associated with your Ping Identity account. Example: PING_IDENTITY_DEVOPS_USER=jsmith@example.com PING_IDENTITY_DEVOPS_KEY=e9bd26ac-17e9-4133-a981-d7a7509314b2 For Kubernetes \u00b6 Our deployments, by default, look for a Kubernetes secret named devops-secret . You can create a Kubernetes secret that contains the environment variables PING_IDENTITY_DEVOPS_USER , PING_IDENTITY_DEVOPS_KEY , and PING_IDENTITY_ACCEPT_EULA kubectl create secret generic devops-secret \\ --from-literal = PING_IDENTITY_DEVOPS_USER = \"<PING_IDENTITY_DEVOPS_USER>\" \\ --from-literal = PING_IDENTITY_DEVOPS_KEY = \"<PING_IDENTITY_DEVOPS_KEY>\" --from-literal = PING_IDENTITY_ACCEPT_EULA = \"YES\"","title":"DevOps Registration"},{"location":"getStarted/devopsRegistration/#ping-identity-devops-registration","text":"Registering for Ping Identity's DevOps Program grants you credentials that, when supplied to product containers automatically, retrieve an evaluation license on startup. To register for the DevOps Program: Make sure you have a registered account with Ping Identity. If you're not sure, click the link to Sign On and follow the instructions. If you don't have an account, create one here . Otherwise, sign on. When signing on, select Support and Community in the Select Account list. After you're signed on, you're directed to your profile page . In the right-side menu, click REGISTER FOR DEVOPS PROGRAM . You'll receive a confirmation message, and your credentials will be forwarded to the email address associated with your Ping Identity account. Example: PING_IDENTITY_DEVOPS_USER=jsmith@example.com PING_IDENTITY_DEVOPS_KEY=e9bd26ac-17e9-4133-a981-d7a7509314b2","title":"Ping Identity DevOps Registration"},{"location":"getStarted/devopsRegistration/#for-kubernetes","text":"Our deployments, by default, look for a Kubernetes secret named devops-secret . You can create a Kubernetes secret that contains the environment variables PING_IDENTITY_DEVOPS_USER , PING_IDENTITY_DEVOPS_KEY , and PING_IDENTITY_ACCEPT_EULA kubectl create secret generic devops-secret \\ --from-literal = PING_IDENTITY_DEVOPS_USER = \"<PING_IDENTITY_DEVOPS_USER>\" \\ --from-literal = PING_IDENTITY_DEVOPS_KEY = \"<PING_IDENTITY_DEVOPS_KEY>\" --from-literal = PING_IDENTITY_ACCEPT_EULA = \"YES\"","title":"For Kubernetes"},{"location":"getStarted/getStarted/","text":"Get Started \u00b6 Ping Identity Docker images are preconfigured to provide working instances of our products, either as single containers or in orchestrated sets. This documentation is intented to help Ping Identity DevOps consumers learn how to use Ping Identity Docker images in Kubernetes, identify appropriate infrastructure configurations, and prepare for ongoing management of services. Usage of Kubernetes may not be explicitly required, but it is recommended along with Helm to provide the best experience without deep customization. Suggested path for reading through this documentation: Prerequisites - Start with the Prerequisites on this page for success though additional examples Deploy Simple Stack - Get your feet wet with a small example Kubernetes and Helm Basics - Optional The bare essential knowledge specific to Ping Identity in DevOps to kickstart those new to Kubernetes and Helm. Deployments - Guidance on what we have identified as the common questions asked by every consumer looking to have a successful produciton deployment. Container Anatomy Prerequisites \u00b6 Egress (outbound) internet access cloned this repo: mkdir -p ${HOME}/projects/devops cd ${HOME}/projects/devops git clone https://github.com/pingidentity/pingidentity-devops-getting-started.git You have access to a kubernetes cluster kubectl helm Set Up Your Devops Environment Set Up Your Devops Environment \u00b6 Evaluation licenses are pulled from Ping's license server at container startup if a valid Ping Identity DevOps User and Key is provided. For more information, see DevOps Registration . Prepare your user and key to be used by deployments via a Kubernetes secret with the name devops-secret . ``` kubectl create secret generic devops-secret \\ --from-literal=PING_IDENTITY_DEVOPS_USER='<YOUR_PING_IDENTITY_DEVOPS_USER>' \\ --from-literal=PING_IDENTITY_DEVOPS_KEY='<YOUR_PING_IDENTITY_DEVOPS_KEY>' \\ --from-literal=PING_IDENTITY_ACCEPT_EULA=YES ``` Info Eventually, full licenses will be desired. Usage can be found here Add our Helm chart repository helm repo add pingidentity https://helm.pingidentity.com/ Deploy Simple Stack \u00b6 Deploy the simple stack with: helm upgrade --install myping pingidentity/ping-devops -f 10 -kubernetes/01-simple-stack/values.yaml Watch the release become healthy: watch -n 2 \"kubectl get pods,services,ingresses\" What is Healthy? In Kubernetes it is assumed an application is healthy if the READY column shows a whole number (e.g. 1/1 or 2/2 ) Note the ingress resources. If your cluster has an nginx-ingress-controller like the one in Deploy a Local Kubernetes Cluster you will see the address field populated: NAME CLASS HOSTS ADDRESS PORTS AGE myping-pingaccess-admin <none> myping-pingaccess-admin.ping-local.com localhost 80, 443 10m myping-pingaccess-engine <none> myping-pingaccess-engine.ping-local.com localhost 80, 443 10m myping-pingdataconsole <none> myping-pingdataconsole.ping-local.com localhost 80, 443 10m myping-pingdelegator <none> myping-pingdelegator.ping-local.com localhost 80, 443 10m myping-pingdirectory <none> myping-pingdirectory.ping-local.com localhost 80, 443 10m myping-pingfederate-admin <none> myping-pingfederate-admin.ping-local.com localhost 80, 443 10m myping-pingfederate-engine <none> myping-pingfederate-engine.ping-local.com localhost 80, 443 10m Interact with Simple Stack \u00b6 Once a product shows healthy, the corresponding host should be accessible via curl or the browser. curl -k https://myping-pingdirectory.ping-local.com/available-state { \"availability-state\":\"AVAILABLE\" } If you cannot access the host url, then you can use port forwarding to access any service resource. Syntax for port-forward as a background process: kubectl port-forward svc/<service-name> <localPort>:<k8sPort> & kubectl port-forward svc/myping-pingdirectory 1443:443 & #response # [1] 1768909 # Forwarding from 127.0.0.1:1443 -> 1443 # Forwarding from [::1]:1443 -> 1443 This opens a port on you local machine to be used by APIs or via browser curl -k https://localhost:1443/available-state Handling connection for 1443 { \"availability-state\":\"AVAILABLE\" } Since the port-forward was created with as a background process using & . You can create mupltiple port-forwards at once. To close the port forward, identify it with the jobs command, then kill the job number: jobs [1] - running kubectl port-forward svc/myping-pingdirectory 1443:443 [2] + running kubectl port-forward svc/myping-pingdirectory 1636:636 kill %1 %2 [1] - 1768909 terminated kubectl port-forward svc/myping-pingdirectory 1443:443 [2] + 1789180 terminated kubectl port-forward svc/myping-pingdirectory 1636:636 Login information for Product Admin Consoles: Port-Forward Reminder If you don't have access to the ingress URLs and want to access via https://localhost:<port> you must first start the port-forward connection Product Connection Details PingFederate Ingress URL: https://myping-pingfederate-admin.ping-local.com/pingfederate/app Port-Forward URL: https://localhost:9999/pingfederate/app Username: administrator Password: 2FederateM0re PingDirectory Ingress URL: https://myping-pingdataconsole.ping-local.com/console Port-Forward URL: https://localhost:8443/console Server: pingdirectory:1636 Username: administrator Password: 2FederateM0re PingAccess Ingress URL: https://myping-pingaccess-admin.ping-local.com Port-Forward URL: https://localhost:9000 Username: administrator Password: 2FederateM0re Delegated Administration Ingress URL: https://myping-pingdelegator.ping-local.com/delegator/ URL: https://localhost:6443/delegator/ Username: administrator Password: 2FederateM0re Apache Directory Studio for PingDirectory **requires port-forward LDAP Host: localhost LDAP Port: 1636 LDAP BaseDN: dc=example,dc=com Root Username: cn=administrator Root Password: 2FederateM0re Cleanup \u00b6 Uninstall your helm release: helm uninstall myping The Ping Identity applications that use persistent storage have dynamically provisioned Persistent Volume Claims . Delete the associated Persistent Volume Claims. kubectl delete pvc --selector=app.kubernetes.io/instance=myping Due to use of dynamic provisioning , deletion of the Persistent Volume Claim will trigger deletion of the bound Persistent Volume and leave your environment clean. Next Steps \u00b6 Depending on preference explore one of these two critical sections: Deployment - Here you will find guidance on what we have identified as the common questions asked by every consumer looking to have a successful produciton deployment. Container Anatomy - A detailed look at what occurs when any PingIdentity Docker image is deployed. This section is deep dive in understanding the patterns implemented across all PingIdentity images to standardize user interaction with any PingIdentity software in DevOps.","title":"Introduction"},{"location":"getStarted/getStarted/#get-started","text":"Ping Identity Docker images are preconfigured to provide working instances of our products, either as single containers or in orchestrated sets. This documentation is intented to help Ping Identity DevOps consumers learn how to use Ping Identity Docker images in Kubernetes, identify appropriate infrastructure configurations, and prepare for ongoing management of services. Usage of Kubernetes may not be explicitly required, but it is recommended along with Helm to provide the best experience without deep customization. Suggested path for reading through this documentation: Prerequisites - Start with the Prerequisites on this page for success though additional examples Deploy Simple Stack - Get your feet wet with a small example Kubernetes and Helm Basics - Optional The bare essential knowledge specific to Ping Identity in DevOps to kickstart those new to Kubernetes and Helm. Deployments - Guidance on what we have identified as the common questions asked by every consumer looking to have a successful produciton deployment. Container Anatomy","title":"Get Started"},{"location":"getStarted/getStarted/#prerequisites","text":"Egress (outbound) internet access cloned this repo: mkdir -p ${HOME}/projects/devops cd ${HOME}/projects/devops git clone https://github.com/pingidentity/pingidentity-devops-getting-started.git You have access to a kubernetes cluster kubectl helm Set Up Your Devops Environment","title":"Prerequisites"},{"location":"getStarted/getStarted/#set-up-your-devops-environment","text":"Evaluation licenses are pulled from Ping's license server at container startup if a valid Ping Identity DevOps User and Key is provided. For more information, see DevOps Registration . Prepare your user and key to be used by deployments via a Kubernetes secret with the name devops-secret . ``` kubectl create secret generic devops-secret \\ --from-literal=PING_IDENTITY_DEVOPS_USER='<YOUR_PING_IDENTITY_DEVOPS_USER>' \\ --from-literal=PING_IDENTITY_DEVOPS_KEY='<YOUR_PING_IDENTITY_DEVOPS_KEY>' \\ --from-literal=PING_IDENTITY_ACCEPT_EULA=YES ``` Info Eventually, full licenses will be desired. Usage can be found here Add our Helm chart repository helm repo add pingidentity https://helm.pingidentity.com/","title":"Set Up Your Devops Environment"},{"location":"getStarted/getStarted/#deploy-simple-stack","text":"Deploy the simple stack with: helm upgrade --install myping pingidentity/ping-devops -f 10 -kubernetes/01-simple-stack/values.yaml Watch the release become healthy: watch -n 2 \"kubectl get pods,services,ingresses\" What is Healthy? In Kubernetes it is assumed an application is healthy if the READY column shows a whole number (e.g. 1/1 or 2/2 ) Note the ingress resources. If your cluster has an nginx-ingress-controller like the one in Deploy a Local Kubernetes Cluster you will see the address field populated: NAME CLASS HOSTS ADDRESS PORTS AGE myping-pingaccess-admin <none> myping-pingaccess-admin.ping-local.com localhost 80, 443 10m myping-pingaccess-engine <none> myping-pingaccess-engine.ping-local.com localhost 80, 443 10m myping-pingdataconsole <none> myping-pingdataconsole.ping-local.com localhost 80, 443 10m myping-pingdelegator <none> myping-pingdelegator.ping-local.com localhost 80, 443 10m myping-pingdirectory <none> myping-pingdirectory.ping-local.com localhost 80, 443 10m myping-pingfederate-admin <none> myping-pingfederate-admin.ping-local.com localhost 80, 443 10m myping-pingfederate-engine <none> myping-pingfederate-engine.ping-local.com localhost 80, 443 10m","title":"Deploy Simple Stack"},{"location":"getStarted/getStarted/#interact-with-simple-stack","text":"Once a product shows healthy, the corresponding host should be accessible via curl or the browser. curl -k https://myping-pingdirectory.ping-local.com/available-state { \"availability-state\":\"AVAILABLE\" } If you cannot access the host url, then you can use port forwarding to access any service resource. Syntax for port-forward as a background process: kubectl port-forward svc/<service-name> <localPort>:<k8sPort> & kubectl port-forward svc/myping-pingdirectory 1443:443 & #response # [1] 1768909 # Forwarding from 127.0.0.1:1443 -> 1443 # Forwarding from [::1]:1443 -> 1443 This opens a port on you local machine to be used by APIs or via browser curl -k https://localhost:1443/available-state Handling connection for 1443 { \"availability-state\":\"AVAILABLE\" } Since the port-forward was created with as a background process using & . You can create mupltiple port-forwards at once. To close the port forward, identify it with the jobs command, then kill the job number: jobs [1] - running kubectl port-forward svc/myping-pingdirectory 1443:443 [2] + running kubectl port-forward svc/myping-pingdirectory 1636:636 kill %1 %2 [1] - 1768909 terminated kubectl port-forward svc/myping-pingdirectory 1443:443 [2] + 1789180 terminated kubectl port-forward svc/myping-pingdirectory 1636:636 Login information for Product Admin Consoles: Port-Forward Reminder If you don't have access to the ingress URLs and want to access via https://localhost:<port> you must first start the port-forward connection Product Connection Details PingFederate Ingress URL: https://myping-pingfederate-admin.ping-local.com/pingfederate/app Port-Forward URL: https://localhost:9999/pingfederate/app Username: administrator Password: 2FederateM0re PingDirectory Ingress URL: https://myping-pingdataconsole.ping-local.com/console Port-Forward URL: https://localhost:8443/console Server: pingdirectory:1636 Username: administrator Password: 2FederateM0re PingAccess Ingress URL: https://myping-pingaccess-admin.ping-local.com Port-Forward URL: https://localhost:9000 Username: administrator Password: 2FederateM0re Delegated Administration Ingress URL: https://myping-pingdelegator.ping-local.com/delegator/ URL: https://localhost:6443/delegator/ Username: administrator Password: 2FederateM0re Apache Directory Studio for PingDirectory **requires port-forward LDAP Host: localhost LDAP Port: 1636 LDAP BaseDN: dc=example,dc=com Root Username: cn=administrator Root Password: 2FederateM0re","title":"Interact with Simple Stack"},{"location":"getStarted/getStarted/#cleanup","text":"Uninstall your helm release: helm uninstall myping The Ping Identity applications that use persistent storage have dynamically provisioned Persistent Volume Claims . Delete the associated Persistent Volume Claims. kubectl delete pvc --selector=app.kubernetes.io/instance=myping Due to use of dynamic provisioning , deletion of the Persistent Volume Claim will trigger deletion of the bound Persistent Volume and leave your environment clean.","title":"Cleanup"},{"location":"getStarted/getStarted/#next-steps","text":"Depending on preference explore one of these two critical sections: Deployment - Here you will find guidance on what we have identified as the common questions asked by every consumer looking to have a successful produciton deployment. Container Anatomy - A detailed look at what occurs when any PingIdentity Docker image is deployed. This section is deep dive in understanding the patterns implemented across all PingIdentity images to standardize user interaction with any PingIdentity software in DevOps.","title":"Next Steps"},{"location":"getStarted/k8sHelmBasics/","text":"Kubernetes and Helm Basics \u00b6 This page cannot cover the depths of Kubernetes or Helm. However, we often deal with groups that are new to Kubernetes and Helm and reading other technical documentation may be too involved for our purposes. In this document will aim to arm newer kubernetes and helm consumers with helpful commands and terminology in simple terms with a focus on relevant commands. These concepts will use Ping Identity in DevOps as a background, but will generally apply to any interactions in Kubernetes. As such, this may feel incomplete or inaccurate to veterans. If you'd like to contribute, feel free to open a pull request! Kubernetes \u00b6 Terms \u00b6 Cluster - The ice cube tray. View a \"cluster\" as a set of resources that you have access to deploy containers onto. A cluster can be as small as your local computer as big as hundreds of VMs, called Nodes, in a data center. Interaction with the cluster requires authentication and RBAC is given to the authenticated identity within the cluster. In a cloud provider Kubernetes cluster (AWS EKS, Azure AKS, Google GKE) the cluster can span multiple Avalability zones, but only one region. In AWS terms, a cluster can be in the region us-west-2, but have nodes in Availability Zones (AZs) us-west-2a, us-west-2b, and us-west-2c. Kubernetes natually helps with high availability by distributing applications with multiple instacnces (called replicas) across avaiable AZs. Nodes - The individual ice cube spaces. The pieces that provide allocatable resources (namely CPU and Memory) and make up a cluster. Typically these are VMs. In AWS it would be ec2 instances. Namespace - A loosely defined \"slice\" of the cluster. Meant to be an area scoped for grouped applications to be deployed. It is possible to allocate resource limits available to a namespace, but this isn't needed. Context - Definition in your ~/.kube/config file that specifies which cluster and namespace your kubectl commands will be sent to. Deployments and Statefulsets - The drops of water that fill ice cube spots. Applications are deployed as Deployments or Statefulsets depending on if they require persistent storage or not. Think of these as controllers that define and manage the: name of an application number of instances of an application (replicas) persistent storage Pod - The molecules that make up drops of water. A Deployment may define the amount of pods, but each one is defined the exact same. For example, you may have a pingfederate-engine deployment that calls for three replicas with 2 CPUs and 2gb of Memory and that is what you will get. You cannot make one engine bigger or smaller than the others. Like a molecule, a pod may be made of just one container, or it can have multiple containers - called sidecars. For Example, your pod may have a pingfederate container as the main process, but a sidecar container like Splunk Universal Forwarder that is used export logs. Sidecar containers will not overlap ports because they interact with each other using localhost. Each pod has it's own IP. PersistentVolume and PersistentVolumeClaim - Simply put, this is an external stoage device/definition that is attached to a container. For Ping Identity applications and in general, when an application requires persistent storage it is managed by a resource called StatefulSet. For example, PingDirectory is a data store with its own database, as such, each instance of PingDirectory needs it's own persistent storage (to avoid database locking conflicts). A StatefulSet is a type of kubernetes resource that has a lot of nice orchestration for stateful applications: predictable naming - myping-pingdirectory-0, myping-pingdirectory-1, myping-pingdirectory-2. Health priority - deploys the first instance and waits for it to be healthy before adding another one. Also, all rolling updates occur to instances one at a time starting with the last one (e.g. myping-pingdirectory-2) first. Persistent Storage per instance - If persistent storage Service - A slim LoadBalancer within the cluster. Services provide a single IP put in front of Deployments and Statefulsets to distrubute traffic. Backchannel communication, like PingFederate using PingDirectory as a user store, should always point to a service name/port rather than the individual pods. Services are given FQDNs in a cluster. Within the same namespace, services are accessible by their name (e.g https://myping-pingdirectory:443 ), but accross namespaces you must be more explicit ( https://myping-pingdirectory.<namespace>:443 ). An FQDN would be `https://myping-pingdirectory. .svc.cluster.local Ingress - A definition used to expose an application outside of the cluster. In order for this to work, you need an Ingress Controller. A common pattern is a deployment of Nginx pods fronted by a physical LoadBalancer. Where client application traffic hits the Loadbalancer is forwarded to Nginx, is evaluated based on the hostname header and path and forwarded to a corresponding application. For example a Pingfederate ingress may have a hostname of myping-pingfederate-engine.ping-local.com. If a client app makes a request to https://myping-pingfederate-engine.ping-local.com/pf/heartbeat.ping the traffic follows like: Client -> LoadBalancer -> NGinx -> pingfederate-engine. More Specifically: Client -> LoadBalancer (Nginx k8s Service) -> Nginx Pod -> Pingfederate-engine k8s Service -> Pingfederate-engine pod. Commands \u00b6 See which cluster and namespace you are using: Easy tool - kubectx Alternatively kubectl config get-contexts kubectl config current-context kubectl config use-context my-cluster-name # Set Namespace kubectl config set-context --current --namespace = <namespace> Viewing resources \u00b6 You may prefer to use k9s - a great UI built directly into terminal. If you cannot use k9s, here we'll discuss standard commands. You can kubectl get any resource type . (pods, deployments, statefulsets, persistentvolumeclaims). Use shortnames! po - pods, deploy - deployments, sts - statefulsets, ing - ingresses, pvc - persistentvolumeclaims The most common - get pods. kubectl get pods Logs, this shows anything that the container prints to stdout. kubectl logs -f <pod-name> Pod with multiple containers: kubectl logs -f <pod-name> -c <container-name> Logs of a crashed pod (RESTARTS != 0) kubectl logs -f <pod-name> --previous See available hostnames by ingress kubectl get ing Debugging \u00b6 When a has crashed surprisingly, we want to first identify why. View logs of the crash: kubectl logs -f <pod-name> --previous View the reason for exit: kubectl describe pod <pod-name> When looking at describe, there two main areas to look: Last State - will should the reason for exit and exit code. Common Exit codes: Exit Codes Common exit codes associated with containers are: Exit Code Description Exit Code 0 Absence of an attached foreground process Exit Code 1 Indicates failure due to application error Exit Code 137 Indicates failure as container received SIGKILL (Manual intervention or \u2018oom-killer\u2019 [OUT-OF-MEMORY]) Exit Code 139 Indicates failure as container received SIGSEGV Exit Code 143 Indicates failure as a container recieved SIGTERM Events - The Events list is most helpful when your pod is not even getting created. Perhaps it is stuck in pending state : There may not be enough resources available for the pod to get created something about the pod definition is incorrect. There may be a missing volume or secret. Helm \u00b6 PingIdentity Devops and Helm All of our examples and guidance will focus on the usage of our PingIdentity DevOps Helm chart . If you do not wish to or cannot use the PingIdentity DevOps Helm chart in production, it is still recommended to at least use it for generating your direct Kubernetes manifest files. This will give Ping Identity the best oportunity to support your environment. Everything in kubernetes is deployed by defining what is desired and allowing kubernetes to achieve the desired state. Helm simplifies consumer (your) interaction by building deployment patterns into templates with variables. A Helm chart includes kubernetes templates and default values (maintained by Ping Identity in this case). So all you have to worry about is providing values to the template variables that matter to you. For example, a service definition looks like: apiVersion: v1 kind: Service metadata: labels: app.kubernetes.io/instance: myping app.kubernetes.io/name: pingdirectory name: myping-pingdirectory spec: ports: - name: https port: 443 protocol: TCP targetPort: 1443 - name: ldap port: 389 protocol: TCP targetPort: 1389 - name: ldaps port: 636 protocol: TCP targetPort: 1636 selector: app.kubernetes.io/instance: myping app.kubernetes.io/name: pingdirectory type: ClusterIP Here, we ask kubernetes to create a service resource with the name myping-pingdirectory . With Helm this entire resource, along with all other required resources for a basic deployment, would be automatically defined just by setting pingdirectory.enabled=true . Terms \u00b6 Manifests - the final kubernetes yaml files that are sent to the cluster for resource creation. Looks like the service defined above. Helm Templates - Go Template versions of kubernetes yaml files. Values and values.yaml - the setting that you pass to a helm chart so the templates will product manifests that you want. Values can be passed one by one, but more commonly they are put on a file called values.yaml pingdirectory : enabled : true This is a very simple values yaml that would produce a kubernetes minifest file over 200 lines long. release - When you deploy something with Helm, you provide a name for identification. This name and the resources deployed along with it make up a release . It is a common pattern to prefix all of the resources managed by a release with the release name. In our examples we will use myping as the release name, so you will see products running with names like: myping-pingfederate-admin , myping-pindirectory , myping-pingauthorize . Building Helm Values File \u00b6 This documentation focuses on the PingIdentity DevOps Helm chart and the values passed to the helm chart in order to achieve your configuration. Which means to have your deployment fit your goals, you will build a values.yaml . The most simple values.yaml for our helm chart could look like: global : enabled : true By default, global.enabled=false , so these two lines are enough to turn on every available PingIdentity software product with a basic configuration. In documentation you may find an example for providing your own server profile via Github to PingDirectory and a snippet of values.yaml specific only to that feature: pingdirectory : envs : SERVER_PROFILE_URL : https://github.com/<your-github-user>/pingidentity-server-profiles This yaml alone will not even turn on PingDirectory, because the default value for pingdirectory.enabled is set to false. To take advantage of the feature, you want to merge this snippet into your own values.yaml to where you end up with: global : enabled : true pingdirectory : envs : SERVER_PROFILE_URL : https://github.com/<your-github-user>/pingidentity-server-profiles This values.yaml turns on all products including PingDirectory, and overwrites the default pingdirectory.envs.SERVER_PROFILE_URL to use https://github.com/<your-github-user>/pingidentity-server-profiles . As you see, helm simplifies what you have to include for deployment, but as you want to be more customized you will want to see what options are available. To see all options available: helm show values pingidenity/ping-devops This will print all the default values that are applied for you, so if you want to overwrite any of it, just copy the snippet out and include it in your own values.yaml. Keep in mind, tabbing and spacing matters. If you copy all the way to the left margin, and paste at the very beginning of a line in your text editor, this should maintain proper indentation. Helm also provides a wide variety of plugins. One particularly helpful one is helm diff . This plugin shows what changes will happen between helm upgrade commands. If anything in a deployment or statefulset shows a change, expect the corresponding pods to be rolled. This is helpful to watch out for a change when you are not prepared for containers to be restarted. Commands \u00b6 As you go though our examples, your goal will be to build a values.yaml file that works for you. The Deploy a release. helm upgrade --install <release_name> pingidentity/ping-devops -f /path/to/values.yaml Clean up a release. helm uninstall <release name> Delete PVCs associated to a release kubectl delete pvc --selector=app.kubernetes.io/instance=<release_name>","title":"Kubernetes and Helm Basics"},{"location":"getStarted/k8sHelmBasics/#kubernetes-and-helm-basics","text":"This page cannot cover the depths of Kubernetes or Helm. However, we often deal with groups that are new to Kubernetes and Helm and reading other technical documentation may be too involved for our purposes. In this document will aim to arm newer kubernetes and helm consumers with helpful commands and terminology in simple terms with a focus on relevant commands. These concepts will use Ping Identity in DevOps as a background, but will generally apply to any interactions in Kubernetes. As such, this may feel incomplete or inaccurate to veterans. If you'd like to contribute, feel free to open a pull request!","title":"Kubernetes and Helm Basics"},{"location":"getStarted/k8sHelmBasics/#kubernetes","text":"","title":"Kubernetes"},{"location":"getStarted/k8sHelmBasics/#terms","text":"Cluster - The ice cube tray. View a \"cluster\" as a set of resources that you have access to deploy containers onto. A cluster can be as small as your local computer as big as hundreds of VMs, called Nodes, in a data center. Interaction with the cluster requires authentication and RBAC is given to the authenticated identity within the cluster. In a cloud provider Kubernetes cluster (AWS EKS, Azure AKS, Google GKE) the cluster can span multiple Avalability zones, but only one region. In AWS terms, a cluster can be in the region us-west-2, but have nodes in Availability Zones (AZs) us-west-2a, us-west-2b, and us-west-2c. Kubernetes natually helps with high availability by distributing applications with multiple instacnces (called replicas) across avaiable AZs. Nodes - The individual ice cube spaces. The pieces that provide allocatable resources (namely CPU and Memory) and make up a cluster. Typically these are VMs. In AWS it would be ec2 instances. Namespace - A loosely defined \"slice\" of the cluster. Meant to be an area scoped for grouped applications to be deployed. It is possible to allocate resource limits available to a namespace, but this isn't needed. Context - Definition in your ~/.kube/config file that specifies which cluster and namespace your kubectl commands will be sent to. Deployments and Statefulsets - The drops of water that fill ice cube spots. Applications are deployed as Deployments or Statefulsets depending on if they require persistent storage or not. Think of these as controllers that define and manage the: name of an application number of instances of an application (replicas) persistent storage Pod - The molecules that make up drops of water. A Deployment may define the amount of pods, but each one is defined the exact same. For example, you may have a pingfederate-engine deployment that calls for three replicas with 2 CPUs and 2gb of Memory and that is what you will get. You cannot make one engine bigger or smaller than the others. Like a molecule, a pod may be made of just one container, or it can have multiple containers - called sidecars. For Example, your pod may have a pingfederate container as the main process, but a sidecar container like Splunk Universal Forwarder that is used export logs. Sidecar containers will not overlap ports because they interact with each other using localhost. Each pod has it's own IP. PersistentVolume and PersistentVolumeClaim - Simply put, this is an external stoage device/definition that is attached to a container. For Ping Identity applications and in general, when an application requires persistent storage it is managed by a resource called StatefulSet. For example, PingDirectory is a data store with its own database, as such, each instance of PingDirectory needs it's own persistent storage (to avoid database locking conflicts). A StatefulSet is a type of kubernetes resource that has a lot of nice orchestration for stateful applications: predictable naming - myping-pingdirectory-0, myping-pingdirectory-1, myping-pingdirectory-2. Health priority - deploys the first instance and waits for it to be healthy before adding another one. Also, all rolling updates occur to instances one at a time starting with the last one (e.g. myping-pingdirectory-2) first. Persistent Storage per instance - If persistent storage Service - A slim LoadBalancer within the cluster. Services provide a single IP put in front of Deployments and Statefulsets to distrubute traffic. Backchannel communication, like PingFederate using PingDirectory as a user store, should always point to a service name/port rather than the individual pods. Services are given FQDNs in a cluster. Within the same namespace, services are accessible by their name (e.g https://myping-pingdirectory:443 ), but accross namespaces you must be more explicit ( https://myping-pingdirectory.<namespace>:443 ). An FQDN would be `https://myping-pingdirectory. .svc.cluster.local Ingress - A definition used to expose an application outside of the cluster. In order for this to work, you need an Ingress Controller. A common pattern is a deployment of Nginx pods fronted by a physical LoadBalancer. Where client application traffic hits the Loadbalancer is forwarded to Nginx, is evaluated based on the hostname header and path and forwarded to a corresponding application. For example a Pingfederate ingress may have a hostname of myping-pingfederate-engine.ping-local.com. If a client app makes a request to https://myping-pingfederate-engine.ping-local.com/pf/heartbeat.ping the traffic follows like: Client -> LoadBalancer -> NGinx -> pingfederate-engine. More Specifically: Client -> LoadBalancer (Nginx k8s Service) -> Nginx Pod -> Pingfederate-engine k8s Service -> Pingfederate-engine pod.","title":"Terms"},{"location":"getStarted/k8sHelmBasics/#commands","text":"See which cluster and namespace you are using: Easy tool - kubectx Alternatively kubectl config get-contexts kubectl config current-context kubectl config use-context my-cluster-name # Set Namespace kubectl config set-context --current --namespace = <namespace>","title":"Commands"},{"location":"getStarted/k8sHelmBasics/#viewing-resources","text":"You may prefer to use k9s - a great UI built directly into terminal. If you cannot use k9s, here we'll discuss standard commands. You can kubectl get any resource type . (pods, deployments, statefulsets, persistentvolumeclaims). Use shortnames! po - pods, deploy - deployments, sts - statefulsets, ing - ingresses, pvc - persistentvolumeclaims The most common - get pods. kubectl get pods Logs, this shows anything that the container prints to stdout. kubectl logs -f <pod-name> Pod with multiple containers: kubectl logs -f <pod-name> -c <container-name> Logs of a crashed pod (RESTARTS != 0) kubectl logs -f <pod-name> --previous See available hostnames by ingress kubectl get ing","title":"Viewing resources"},{"location":"getStarted/k8sHelmBasics/#debugging","text":"When a has crashed surprisingly, we want to first identify why. View logs of the crash: kubectl logs -f <pod-name> --previous View the reason for exit: kubectl describe pod <pod-name> When looking at describe, there two main areas to look: Last State - will should the reason for exit and exit code. Common Exit codes: Exit Codes Common exit codes associated with containers are: Exit Code Description Exit Code 0 Absence of an attached foreground process Exit Code 1 Indicates failure due to application error Exit Code 137 Indicates failure as container received SIGKILL (Manual intervention or \u2018oom-killer\u2019 [OUT-OF-MEMORY]) Exit Code 139 Indicates failure as container received SIGSEGV Exit Code 143 Indicates failure as a container recieved SIGTERM Events - The Events list is most helpful when your pod is not even getting created. Perhaps it is stuck in pending state : There may not be enough resources available for the pod to get created something about the pod definition is incorrect. There may be a missing volume or secret.","title":"Debugging"},{"location":"getStarted/k8sHelmBasics/#helm","text":"PingIdentity Devops and Helm All of our examples and guidance will focus on the usage of our PingIdentity DevOps Helm chart . If you do not wish to or cannot use the PingIdentity DevOps Helm chart in production, it is still recommended to at least use it for generating your direct Kubernetes manifest files. This will give Ping Identity the best oportunity to support your environment. Everything in kubernetes is deployed by defining what is desired and allowing kubernetes to achieve the desired state. Helm simplifies consumer (your) interaction by building deployment patterns into templates with variables. A Helm chart includes kubernetes templates and default values (maintained by Ping Identity in this case). So all you have to worry about is providing values to the template variables that matter to you. For example, a service definition looks like: apiVersion: v1 kind: Service metadata: labels: app.kubernetes.io/instance: myping app.kubernetes.io/name: pingdirectory name: myping-pingdirectory spec: ports: - name: https port: 443 protocol: TCP targetPort: 1443 - name: ldap port: 389 protocol: TCP targetPort: 1389 - name: ldaps port: 636 protocol: TCP targetPort: 1636 selector: app.kubernetes.io/instance: myping app.kubernetes.io/name: pingdirectory type: ClusterIP Here, we ask kubernetes to create a service resource with the name myping-pingdirectory . With Helm this entire resource, along with all other required resources for a basic deployment, would be automatically defined just by setting pingdirectory.enabled=true .","title":"Helm"},{"location":"getStarted/k8sHelmBasics/#terms_1","text":"Manifests - the final kubernetes yaml files that are sent to the cluster for resource creation. Looks like the service defined above. Helm Templates - Go Template versions of kubernetes yaml files. Values and values.yaml - the setting that you pass to a helm chart so the templates will product manifests that you want. Values can be passed one by one, but more commonly they are put on a file called values.yaml pingdirectory : enabled : true This is a very simple values yaml that would produce a kubernetes minifest file over 200 lines long. release - When you deploy something with Helm, you provide a name for identification. This name and the resources deployed along with it make up a release . It is a common pattern to prefix all of the resources managed by a release with the release name. In our examples we will use myping as the release name, so you will see products running with names like: myping-pingfederate-admin , myping-pindirectory , myping-pingauthorize .","title":"Terms"},{"location":"getStarted/k8sHelmBasics/#building-helm-values-file","text":"This documentation focuses on the PingIdentity DevOps Helm chart and the values passed to the helm chart in order to achieve your configuration. Which means to have your deployment fit your goals, you will build a values.yaml . The most simple values.yaml for our helm chart could look like: global : enabled : true By default, global.enabled=false , so these two lines are enough to turn on every available PingIdentity software product with a basic configuration. In documentation you may find an example for providing your own server profile via Github to PingDirectory and a snippet of values.yaml specific only to that feature: pingdirectory : envs : SERVER_PROFILE_URL : https://github.com/<your-github-user>/pingidentity-server-profiles This yaml alone will not even turn on PingDirectory, because the default value for pingdirectory.enabled is set to false. To take advantage of the feature, you want to merge this snippet into your own values.yaml to where you end up with: global : enabled : true pingdirectory : envs : SERVER_PROFILE_URL : https://github.com/<your-github-user>/pingidentity-server-profiles This values.yaml turns on all products including PingDirectory, and overwrites the default pingdirectory.envs.SERVER_PROFILE_URL to use https://github.com/<your-github-user>/pingidentity-server-profiles . As you see, helm simplifies what you have to include for deployment, but as you want to be more customized you will want to see what options are available. To see all options available: helm show values pingidenity/ping-devops This will print all the default values that are applied for you, so if you want to overwrite any of it, just copy the snippet out and include it in your own values.yaml. Keep in mind, tabbing and spacing matters. If you copy all the way to the left margin, and paste at the very beginning of a line in your text editor, this should maintain proper indentation. Helm also provides a wide variety of plugins. One particularly helpful one is helm diff . This plugin shows what changes will happen between helm upgrade commands. If anything in a deployment or statefulset shows a change, expect the corresponding pods to be rolled. This is helpful to watch out for a change when you are not prepared for containers to be restarted.","title":"Building Helm Values File"},{"location":"getStarted/k8sHelmBasics/#commands_1","text":"As you go though our examples, your goal will be to build a values.yaml file that works for you. The Deploy a release. helm upgrade --install <release_name> pingidentity/ping-devops -f /path/to/values.yaml Clean up a release. helm uninstall <release name> Delete PVCs associated to a release kubectl delete pvc --selector=app.kubernetes.io/instance=<release_name>","title":"Commands"},{"location":"getStarted/localK8sCluster/","text":"Deploy a Local DEMO Kubernetes Cluster \u00b6 If you don't have access to a managed Kubernetes cluster you can deploy one on your local machine or vm. This document descibes deploying a cluster with kind . Use the kind site directly to find additional configuration. Demo Use Only The instructions in this document are for testing and learning, and not intended for use in production. Prerequisites \u00b6 docker kubectl ports 80 and 443 available on machine Docker System Resources Docker on linux is typically installed with root privileges and thus has access to the full resources of the machine. Docker for Mac and Windows has a UI to set the resources allocated to docker. Our test Docker for Mac is running with 3 CPUs and 6 GB Memory. Adjust as necessary to your needs. Steps \u00b6 Start by installing kind on your platform. Then, create a kind cluster with snippets/kind.yaml file to allow ingress (app exposure). kind create cluster --config=snippets/kind.yaml Once ready, test cluster health with: kubectl cluster-info kubectl version kubectl get nodes Next, Install the nginx-ingress-controller for kind kubectl apply -f snippets/kind-nginx.yaml Wait for nginx to become healthy: kubectl wait --namespace ingress-nginx \\ --for=condition=ready pod \\ --selector=app.kubernetes.io/component=controller \\ --timeout=90s Check if nginx-ingress-controller is working: curl localhost Returns: <html> <head><title>404 Not Found</title></head> <body> <center><h1>404 Not Found</h1></center> <hr><center>nginx</center> </body> </html> Our examples will use the domain *ping-local.com for accessing applications. You can add all expected hosts to /etc/hsots: echo '127.0.0.1 myping-pingaccess-admin.ping-local.com myping-pingaccess-engine.ping-local.com myping-pingauthorize.ping-local.com myping-pingauthorizepap.ping-local.com myping-pingdataconsole.ping-local.com myping-pingdelegator.ping-local.com myping-pingdirectory.ping-local.com myping-pingdatagovernance.ping-local.com myping-pingdatagovernancepap.ping-local.com myping-pingfederate-admin.ping-local.com myping-pingfederate-engine.ping-local.com' \\ | sudo tee -a /etc/hosts \\ > /dev/null You should now be ready to test out some helm examples.","title":"Local Kubernetes Cluster"},{"location":"getStarted/localK8sCluster/#deploy-a-local-demo-kubernetes-cluster","text":"If you don't have access to a managed Kubernetes cluster you can deploy one on your local machine or vm. This document descibes deploying a cluster with kind . Use the kind site directly to find additional configuration. Demo Use Only The instructions in this document are for testing and learning, and not intended for use in production.","title":"Deploy a Local DEMO Kubernetes Cluster"},{"location":"getStarted/localK8sCluster/#prerequisites","text":"docker kubectl ports 80 and 443 available on machine Docker System Resources Docker on linux is typically installed with root privileges and thus has access to the full resources of the machine. Docker for Mac and Windows has a UI to set the resources allocated to docker. Our test Docker for Mac is running with 3 CPUs and 6 GB Memory. Adjust as necessary to your needs.","title":"Prerequisites"},{"location":"getStarted/localK8sCluster/#steps","text":"Start by installing kind on your platform. Then, create a kind cluster with snippets/kind.yaml file to allow ingress (app exposure). kind create cluster --config=snippets/kind.yaml Once ready, test cluster health with: kubectl cluster-info kubectl version kubectl get nodes Next, Install the nginx-ingress-controller for kind kubectl apply -f snippets/kind-nginx.yaml Wait for nginx to become healthy: kubectl wait --namespace ingress-nginx \\ --for=condition=ready pod \\ --selector=app.kubernetes.io/component=controller \\ --timeout=90s Check if nginx-ingress-controller is working: curl localhost Returns: <html> <head><title>404 Not Found</title></head> <body> <center><h1>404 Not Found</h1></center> <hr><center>nginx</center> </body> </html> Our examples will use the domain *ping-local.com for accessing applications. You can add all expected hosts to /etc/hsots: echo '127.0.0.1 myping-pingaccess-admin.ping-local.com myping-pingaccess-engine.ping-local.com myping-pingauthorize.ping-local.com myping-pingauthorizepap.ping-local.com myping-pingdataconsole.ping-local.com myping-pingdelegator.ping-local.com myping-pingdirectory.ping-local.com myping-pingdatagovernance.ping-local.com myping-pingdatagovernancepap.ping-local.com myping-pingfederate-admin.ping-local.com myping-pingfederate-engine.ping-local.com' \\ | sudo tee -a /etc/hosts \\ > /dev/null You should now be ready to test out some helm examples.","title":"Steps"},{"location":"reference/containerAnatomy/","text":"Introduction to Image/Container anatomy \u00b6 Container data flows and running state \u00b6 The diagram below shows the anatomy of a container with flows of data into the container and how it transitions to the eventual running state. Data Class Default Location Use Description VAULT ext Secret information from external Vault (i.e. HashiCorp Vault). Items like passwords, certificates, keys, etc... ORCH ext Environment variables from secrets, configmaps and/or env/envfile resources from orchestration (i.e. docker, k8s. SERVER PROFILE ext Product server profile from either an external repository (i.e. git) or external volume (i.e. aws s3). SERVER BITS /opt/server ro Uncompressed copy of the product software. Provided by image. SECRETS /run/secrets ro Read Only secrets residing on non-persistent storage (i.e. /run/secrets). IN /opt/in ro Volume intended to receive all incoming server-profile information. ENV /opt/staging/.env mem Environment variable settings used by hooks and product to configure container. STAGING /opt/staging tmp Temporary space used to prepare configuration and store variable settings before being moved to OUT OUT /opt/out rw Combo of product bits/configuration resulting in running container configuration. PERSISTENT VOLUME rw Persistent location of product bits/configuration in external storage (i.e. AWS EBS) Because of many factors of how an image is deployed, the options available and recommended for use of the elements in the previous table can vary greatly: Deployment Environment - Kubernetes, Cloud Vendor, Local Docker CI/CD Tools - Kubectl, Helm, Kustomize, Terraform Source Maintenance - Git, Cloud Vendor Volumes Customer Environment - Development, Test, QA, Stage, Prod Security - Test/QA/Production Data, Secrets, Certificates, Secret Management Tools Examples might look like: Production Example \u00b6 The following diagram shows an example in a high-level production scenario in an Amazon Web Services (AWS) EKS environment, where: * HashiCorp Vault is used to provide secrets to the container. * Helm is used to create k8s resources and deploy them. * AWS EBS volumes is used to persist the state of the container. Development Example \u00b6 The following diagram shows an example in a high-level development scenario in an Azure AKS environment, where: * No secrets management is used. * Simple kubectl is used to deploy k8s resources. * AWS EBS volumes is used to persist the state of the container. Customizing the Containers \u00b6 You can customize our product containers by: Customizing server profiles The server profiles supply configuration, data, and environment information to the product containers at startup. You can use our server profiles or use them as a baseline for creating your own. You can find these in Baseline server profiles in our pingidentity-server-profiles repository. Customizing YAML files In the stack-related directories for the deployment examples, you can find the YAML files used to configure the Docker stack deployment. The YAML files can contain startup configuration settings or references to startup configuration settings, such as environment variables, for the stack. You can try different configuration settings using these YAML files or use them as a baseline for creating your own. Using DevOps hooks Hooks are DevOps shell scripts, generally specific to a product, that you can use to automate certain operations. You can find the hooks for our builds in the Docker builds product directories . Using release tags We use sets of tags for each released build image. These tags identify whether the image is a specific stable release, the latest stable release, or current (potentially unstable) builds. You can find the release tag information in Docker images . You can try different tags in either the standalone startup scripts for the deployment examples or the YAML files for the orchestrated deployment examples. Adding a message of the day (MOTD) You can use a motd.json file to add message of the day information that will be used by the DevOps images.","title":"Image/Container Anatomy"},{"location":"reference/containerAnatomy/#introduction-to-imagecontainer-anatomy","text":"","title":"Introduction to Image/Container anatomy"},{"location":"reference/containerAnatomy/#container-data-flows-and-running-state","text":"The diagram below shows the anatomy of a container with flows of data into the container and how it transitions to the eventual running state. Data Class Default Location Use Description VAULT ext Secret information from external Vault (i.e. HashiCorp Vault). Items like passwords, certificates, keys, etc... ORCH ext Environment variables from secrets, configmaps and/or env/envfile resources from orchestration (i.e. docker, k8s. SERVER PROFILE ext Product server profile from either an external repository (i.e. git) or external volume (i.e. aws s3). SERVER BITS /opt/server ro Uncompressed copy of the product software. Provided by image. SECRETS /run/secrets ro Read Only secrets residing on non-persistent storage (i.e. /run/secrets). IN /opt/in ro Volume intended to receive all incoming server-profile information. ENV /opt/staging/.env mem Environment variable settings used by hooks and product to configure container. STAGING /opt/staging tmp Temporary space used to prepare configuration and store variable settings before being moved to OUT OUT /opt/out rw Combo of product bits/configuration resulting in running container configuration. PERSISTENT VOLUME rw Persistent location of product bits/configuration in external storage (i.e. AWS EBS) Because of many factors of how an image is deployed, the options available and recommended for use of the elements in the previous table can vary greatly: Deployment Environment - Kubernetes, Cloud Vendor, Local Docker CI/CD Tools - Kubectl, Helm, Kustomize, Terraform Source Maintenance - Git, Cloud Vendor Volumes Customer Environment - Development, Test, QA, Stage, Prod Security - Test/QA/Production Data, Secrets, Certificates, Secret Management Tools Examples might look like:","title":"Container data flows and running state"},{"location":"reference/containerAnatomy/#production-example","text":"The following diagram shows an example in a high-level production scenario in an Amazon Web Services (AWS) EKS environment, where: * HashiCorp Vault is used to provide secrets to the container. * Helm is used to create k8s resources and deploy them. * AWS EBS volumes is used to persist the state of the container.","title":"Production Example"},{"location":"reference/containerAnatomy/#development-example","text":"The following diagram shows an example in a high-level development scenario in an Azure AKS environment, where: * No secrets management is used. * Simple kubectl is used to deploy k8s resources. * AWS EBS volumes is used to persist the state of the container.","title":"Development Example"},{"location":"reference/containerAnatomy/#customizing-the-containers","text":"You can customize our product containers by: Customizing server profiles The server profiles supply configuration, data, and environment information to the product containers at startup. You can use our server profiles or use them as a baseline for creating your own. You can find these in Baseline server profiles in our pingidentity-server-profiles repository. Customizing YAML files In the stack-related directories for the deployment examples, you can find the YAML files used to configure the Docker stack deployment. The YAML files can contain startup configuration settings or references to startup configuration settings, such as environment variables, for the stack. You can try different configuration settings using these YAML files or use them as a baseline for creating your own. Using DevOps hooks Hooks are DevOps shell scripts, generally specific to a product, that you can use to automate certain operations. You can find the hooks for our builds in the Docker builds product directories . Using release tags We use sets of tags for each released build image. These tags identify whether the image is a specific stable release, the latest stable release, or current (potentially unstable) builds. You can find the release tag information in Docker images . You can try different tags in either the standalone startup scripts for the deployment examples or the YAML files for the orchestrated deployment examples. Adding a message of the day (MOTD) You can use a motd.json file to add message of the day information that will be used by the DevOps images.","title":"Customizing the Containers"},{"location":"reference/existingLicense/","text":"Mount Existing Product License \u00b6 You can pass the license file to a container via mounting to the container's /opt/in directory. Note: If you have provided license files via the volume mount and a DevOps User/Key, it will ignore the DevOps User/Key. The /opt/in directory overlays files onto the products runtime filesystem, the license must be named correctly and mounted in the following locations for new deployments. License File Mount Paths \u00b6 Product File Name Mount Path PingFederate pingfederate.lic /opt/in/instance/server/default/conf/pingfederate.lic PingAccess pingaccess.lic /opt/in/instance/conf/pingaccess.lic PingDirectory PingDirectory.lic /opt/in/pd.profile/server-root/pre-setup/PingDirectory.lic PingDataSync PingDirectory.lic /opt/in/instance/PingDirectory.lic PingAuthorize PingAuthorize.lic /opt/in/instance/PingAuthorize.lic PingAuthorize PAP PingAuthorize.lic /opt/in/instance/PingAuthorize.lic PingCentral pingcentral.lic /opt/in/instance/conf/pingcentral.lic Helm \u00b6 Create a Kubernetes secret from the license file kubectl create secret generic pingfederate-license \\ --from-file = ./pingfederate.lic Add the secretVolumes within your values.yaml deployment file pingfederate-admin : ... secretVolumes : pingfederate-license : items : pingfederate.lic : /opt/in/instance/server/default/conf/pingfederate.lic Kubernetes Manifest \u00b6 Create a Kubernetes secret from the license file kubectl create secret generic pingfederate-license \\ --from-file = ./pingfederate.lic Then mount it to the pod spec : containers : - name : pingfederate image : pingidentity/pingfederate volumeMounts : - name : pingfederate-license-volume mountPath : \"/opt/in/instance/server/default/conf/pingfederate.lic\" subPath : pingfederate.lic volumes : - name : pingfederate-license-volume secret : secretName : pingfederate-license","title":"Mount Existing Product License"},{"location":"reference/existingLicense/#mount-existing-product-license","text":"You can pass the license file to a container via mounting to the container's /opt/in directory. Note: If you have provided license files via the volume mount and a DevOps User/Key, it will ignore the DevOps User/Key. The /opt/in directory overlays files onto the products runtime filesystem, the license must be named correctly and mounted in the following locations for new deployments.","title":"Mount Existing Product License"},{"location":"reference/existingLicense/#license-file-mount-paths","text":"Product File Name Mount Path PingFederate pingfederate.lic /opt/in/instance/server/default/conf/pingfederate.lic PingAccess pingaccess.lic /opt/in/instance/conf/pingaccess.lic PingDirectory PingDirectory.lic /opt/in/pd.profile/server-root/pre-setup/PingDirectory.lic PingDataSync PingDirectory.lic /opt/in/instance/PingDirectory.lic PingAuthorize PingAuthorize.lic /opt/in/instance/PingAuthorize.lic PingAuthorize PAP PingAuthorize.lic /opt/in/instance/PingAuthorize.lic PingCentral pingcentral.lic /opt/in/instance/conf/pingcentral.lic","title":"License File Mount Paths"},{"location":"reference/existingLicense/#helm","text":"Create a Kubernetes secret from the license file kubectl create secret generic pingfederate-license \\ --from-file = ./pingfederate.lic Add the secretVolumes within your values.yaml deployment file pingfederate-admin : ... secretVolumes : pingfederate-license : items : pingfederate.lic : /opt/in/instance/server/default/conf/pingfederate.lic","title":"Helm"},{"location":"reference/existingLicense/#kubernetes-manifest","text":"Create a Kubernetes secret from the license file kubectl create secret generic pingfederate-license \\ --from-file = ./pingfederate.lic Then mount it to the pod spec : containers : - name : pingfederate image : pingidentity/pingfederate volumeMounts : - name : pingfederate-license-volume mountPath : \"/opt/in/instance/server/default/conf/pingfederate.lic\" subPath : pingfederate.lic volumes : - name : pingfederate-license-volume secret : secretName : pingfederate-license","title":"Kubernetes Manifest"},{"location":"releaseNotes/2003/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2003 \u00b6 New Features \u00b6 PingDirectoryProxy The PingDirectoryProxy Docker image is now available. See the Ping Identity Docker Hub PingCentral The PingCentral Docker image is now available. See the Ping Identity Docker Hub Docker Compose Port Mappings We now support the Docker Compose best practice of quoting all port mappings. Docker Images (Tag: edge) We've built a pipeline to support nightly public builds of all Ping Identity Docker images using the edge tag. PingDirectory We've upgraded the PingDirectory Docker image to the current product version 8.0.0.1. PingFederate Version 10.1.0 We've built a beta PingFederate 10.1.0 Docker image. PingAccess Version 6.1.0 We've built a beta PingAccess 6.1.0 Docker image. Ping Tool Kit The Ping Tool Kit Docker image is now available. See Ping Identity Docker Hub . Both kubectl and kustomize are supported in the image. PingFederate Version 9.3 We've updated the PingFederate 9.3 Docker image to include the latest product patches. The ping-devops Utility We've added Kubernetes license secret generation, and server profile generation for PingDirectory to the ping-devops utility. See The ping-devops utility . A New Hook We've added a security start-up hook notifying administrators of keys and secrets found in the server profile. DevOps Evaluation License We've added retry functionality to attempt getting the DevOps evaluation license if the initial request fails. Product Artifacts and Extensions We've created operations to retrieve product artifacts and extensions using the DevOps credentials. Java 11 We've migrated all Alpine-based Docker images to Java 11 (Azul). PingDirectory Replication Timing We've added a profile and reference example to test PingDirectory replication timing. See the pingidentity-devops-getting-started Repo . Docker Base Image Security We've documented an evaluation of Docker base image security. See Evaluation of Docker Base Image Security . Resolved Defects \u00b6 (GDO-85) Resolved an issue where PingAccess 6.0 loaded a 5.2 license. (GDO-87) Resolved an issue where Data Console wasn't allowing users to authenticate (edge tag). (GDO-124) Resolved an issue in with pipeline where starting containers using Docker-Compose timed out. (GDO-89) Resolved an issue where *.subst template files were able to overwrite the server profile configuration. (GDO-72) Resolved an issue where motd.json did not parse correctly when the product was missing. (GDO-88) Resolved an issue where PingFederate profile metadata did not expand hostname , breaking OAuth flows. Changed \u00b6 (GDO-97) Removed WebConsole HTTP servlet from the baseline server profile. See the pingidentity-server-profiles repo . Qualified \u00b6 (GDO-42) Verified the ability to run our Docker containers as a non-root user. See Securing the Containers .","title":"Version 2003"},{"location":"releaseNotes/2003/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2003/#devops-docker-builds-version-2003","text":"","title":"DevOps Docker Builds, Version 2003"},{"location":"releaseNotes/2003/#new-features","text":"PingDirectoryProxy The PingDirectoryProxy Docker image is now available. See the Ping Identity Docker Hub PingCentral The PingCentral Docker image is now available. See the Ping Identity Docker Hub Docker Compose Port Mappings We now support the Docker Compose best practice of quoting all port mappings. Docker Images (Tag: edge) We've built a pipeline to support nightly public builds of all Ping Identity Docker images using the edge tag. PingDirectory We've upgraded the PingDirectory Docker image to the current product version 8.0.0.1. PingFederate Version 10.1.0 We've built a beta PingFederate 10.1.0 Docker image. PingAccess Version 6.1.0 We've built a beta PingAccess 6.1.0 Docker image. Ping Tool Kit The Ping Tool Kit Docker image is now available. See Ping Identity Docker Hub . Both kubectl and kustomize are supported in the image. PingFederate Version 9.3 We've updated the PingFederate 9.3 Docker image to include the latest product patches. The ping-devops Utility We've added Kubernetes license secret generation, and server profile generation for PingDirectory to the ping-devops utility. See The ping-devops utility . A New Hook We've added a security start-up hook notifying administrators of keys and secrets found in the server profile. DevOps Evaluation License We've added retry functionality to attempt getting the DevOps evaluation license if the initial request fails. Product Artifacts and Extensions We've created operations to retrieve product artifacts and extensions using the DevOps credentials. Java 11 We've migrated all Alpine-based Docker images to Java 11 (Azul). PingDirectory Replication Timing We've added a profile and reference example to test PingDirectory replication timing. See the pingidentity-devops-getting-started Repo . Docker Base Image Security We've documented an evaluation of Docker base image security. See Evaluation of Docker Base Image Security .","title":"New Features"},{"location":"releaseNotes/2003/#resolved-defects","text":"(GDO-85) Resolved an issue where PingAccess 6.0 loaded a 5.2 license. (GDO-87) Resolved an issue where Data Console wasn't allowing users to authenticate (edge tag). (GDO-124) Resolved an issue in with pipeline where starting containers using Docker-Compose timed out. (GDO-89) Resolved an issue where *.subst template files were able to overwrite the server profile configuration. (GDO-72) Resolved an issue where motd.json did not parse correctly when the product was missing. (GDO-88) Resolved an issue where PingFederate profile metadata did not expand hostname , breaking OAuth flows.","title":"Resolved Defects"},{"location":"releaseNotes/2003/#changed","text":"(GDO-97) Removed WebConsole HTTP servlet from the baseline server profile. See the pingidentity-server-profiles repo .","title":"Changed"},{"location":"releaseNotes/2003/#qualified","text":"(GDO-42) Verified the ability to run our Docker containers as a non-root user. See Securing the Containers .","title":"Qualified"},{"location":"releaseNotes/2004/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2004 \u00b6 New Features \u00b6 Hashicorp Vault We've built an integration for Hashicorp Vault. See the Deploy Hashicorp Vault . PingCentral The PingCentral Docker image is now available. See the Ping Identity Docker hub . Docker Compose We've standardized our Docker Compose references. Performance We've built a performance framework. PingFederate version 10.0.2 We've updated the PingFederate 10 Docker image for the 10.0.2 release. The ping-devops utility We've added major enhancements to our ping-devops utility. See The ping-devops Utility . PingDirectory replication We've added support for PingDirectory replication using Docker Compose. Variables and scope We've added documentation to help with understanding the effective scope of variables. See Variables and Scope . Elasticsearch SIEM stack We've added documentation for our Elasticsearch SIEM stack. See Deploy an Elasticsearch SIEM Stack . Resolved Defects \u00b6 (GDO-1) Resolved issue where users were unable to override root and admin user passwords (PingDirectory). (GDO-129) Removed the console from Ping Data products when the server profile isn't specified. (GDO-54) Resolved PingDataGovernance issues within the baseline server profile. (GDO-138) Resolved issue regarding PingDataGovernance Policy Administration Point (PAP) launch. (GDO-189) Resolved issue with PingAccess heartbeat check. (GDO-196) Replaced nslookup with getent due to issues running in Alpine. (GDO-180) Resolved issue where extension signature verification may return a false positive. (GDO-169) Resolved issues with Ping Data Console by upgrading to Tomcat 9.0.34. (GDO-166) Resolved issue with make-ldif template processing.","title":"Version 2004"},{"location":"releaseNotes/2004/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2004/#devops-docker-builds-version-2004","text":"","title":"DevOps Docker Builds, Version 2004"},{"location":"releaseNotes/2004/#new-features","text":"Hashicorp Vault We've built an integration for Hashicorp Vault. See the Deploy Hashicorp Vault . PingCentral The PingCentral Docker image is now available. See the Ping Identity Docker hub . Docker Compose We've standardized our Docker Compose references. Performance We've built a performance framework. PingFederate version 10.0.2 We've updated the PingFederate 10 Docker image for the 10.0.2 release. The ping-devops utility We've added major enhancements to our ping-devops utility. See The ping-devops Utility . PingDirectory replication We've added support for PingDirectory replication using Docker Compose. Variables and scope We've added documentation to help with understanding the effective scope of variables. See Variables and Scope . Elasticsearch SIEM stack We've added documentation for our Elasticsearch SIEM stack. See Deploy an Elasticsearch SIEM Stack .","title":"New Features"},{"location":"releaseNotes/2004/#resolved-defects","text":"(GDO-1) Resolved issue where users were unable to override root and admin user passwords (PingDirectory). (GDO-129) Removed the console from Ping Data products when the server profile isn't specified. (GDO-54) Resolved PingDataGovernance issues within the baseline server profile. (GDO-138) Resolved issue regarding PingDataGovernance Policy Administration Point (PAP) launch. (GDO-189) Resolved issue with PingAccess heartbeat check. (GDO-196) Replaced nslookup with getent due to issues running in Alpine. (GDO-180) Resolved issue where extension signature verification may return a false positive. (GDO-169) Resolved issues with Ping Data Console by upgrading to Tomcat 9.0.34. (GDO-166) Resolved issue with make-ldif template processing.","title":"Resolved Defects"},{"location":"releaseNotes/2005/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2005 (May 2020) \u00b6 New Features \u00b6 PingDelegator Docker Image The PingDelegator Docker image is now available. View on Docker Hub for more information. Test drive PingDelegator using the supplied docker-compose file in our Simple-Stack example. PingAccess Image Version 6.0.2 We've updated the PingAccess Image to version 6.0.2. PingFederate Version 9.3.3 We've updated the PingFederate 9.3.3 Docker image to include patch 4. Docker Builds Pipeline We've made a number of CI/CD enhancements to improve Image qualification (smoke/integration tests). Image Enhancements Improved the wait-for command to optionally wait for a path or file to become available. Resolved Defects \u00b6 (GDO-187) Resolved issue where MAX_HEAP_SIZE wasn't applied during container restart. (GDO-220) Resolved issue where log message didn't contain log file source name. (GDO-238) Resolved issue where ping-devops kubernetes start fails if DNS_ZONE variable not set. (GDO-245) Resolved issue where PingAccess didn't exit when configuration import failed. (GDO-263) Resolved issue within deploy_docs.sh which had resulted in some documentation to not be pushed to GitHub. (GDO-278) Resolved issue with PingAccess clustering Server Profile.","title":"Version 2005"},{"location":"releaseNotes/2005/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2005/#devops-docker-builds-version-2005-may-2020","text":"","title":"DevOps Docker Builds, Version 2005 (May 2020)"},{"location":"releaseNotes/2005/#new-features","text":"PingDelegator Docker Image The PingDelegator Docker image is now available. View on Docker Hub for more information. Test drive PingDelegator using the supplied docker-compose file in our Simple-Stack example. PingAccess Image Version 6.0.2 We've updated the PingAccess Image to version 6.0.2. PingFederate Version 9.3.3 We've updated the PingFederate 9.3.3 Docker image to include patch 4. Docker Builds Pipeline We've made a number of CI/CD enhancements to improve Image qualification (smoke/integration tests). Image Enhancements Improved the wait-for command to optionally wait for a path or file to become available.","title":"New Features"},{"location":"releaseNotes/2005/#resolved-defects","text":"(GDO-187) Resolved issue where MAX_HEAP_SIZE wasn't applied during container restart. (GDO-220) Resolved issue where log message didn't contain log file source name. (GDO-238) Resolved issue where ping-devops kubernetes start fails if DNS_ZONE variable not set. (GDO-245) Resolved issue where PingAccess didn't exit when configuration import failed. (GDO-263) Resolved issue within deploy_docs.sh which had resulted in some documentation to not be pushed to GitHub. (GDO-278) Resolved issue with PingAccess clustering Server Profile.","title":"Resolved Defects"},{"location":"releaseNotes/2006/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2006 (June 2020) \u00b6 New Features \u00b6 Docker Compose Volumes Applications that create and manage configuration now have mounted volumes in Docker-Compose Examples , ensuring that your configuration changes are persisted across restarted. PingAccess Image Enhancements We've updated the PingAccess Image to support the new features available in version 6.1. Customer Support Data Collection Included in this release is the Java diagnostic tool to enable embedded customer support data collection. This tool set includes jstat , jmap and jhat . New Product Versions \u00b6 The following new product versions are available using edge , latest and 2006 image tags: PingFederate 10.1.0 PingAccess 6.1.0 PingDirectory 8.1.0.0 PingDirectoryProxy 8.1.0.0 PingDataGovernance 8.1.0.0 PingDataGovernance 8.1.0.0 PAP PingDataSync 8.1.0.0 PingCentral 1.4.0 Improvements \u00b6 Liveness Check We've made improvements to PingDirectory's liveness check to better inform dependant services on the status of the Directory service. Docker Build Pipeline We've published Documentation on how to build a Ping Identity Docker Image using a local zip artifact. We have improved our reference pipeline to allow for the build of a single product. We've made several CI/CD enhancements to improve Image qualification (smoke/integration tests). Configuration Substitution We've made enhancements to explicitly send the variables to be substituted. Resolved Defects \u00b6 (GDO-218) Resolved an issue where PingDirectory threw an error on manage-profile during setup. (GDO-289) Resolved an issue where Alpine based image couldn't install pip3. (GDO-329) Resolved an issue where PingCentral docs were not syncing to GitHub.","title":"Version 2006"},{"location":"releaseNotes/2006/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2006/#devops-docker-builds-version-2006-june-2020","text":"","title":"DevOps Docker Builds, Version 2006 (June 2020)"},{"location":"releaseNotes/2006/#new-features","text":"Docker Compose Volumes Applications that create and manage configuration now have mounted volumes in Docker-Compose Examples , ensuring that your configuration changes are persisted across restarted. PingAccess Image Enhancements We've updated the PingAccess Image to support the new features available in version 6.1. Customer Support Data Collection Included in this release is the Java diagnostic tool to enable embedded customer support data collection. This tool set includes jstat , jmap and jhat .","title":"New Features"},{"location":"releaseNotes/2006/#new-product-versions","text":"The following new product versions are available using edge , latest and 2006 image tags: PingFederate 10.1.0 PingAccess 6.1.0 PingDirectory 8.1.0.0 PingDirectoryProxy 8.1.0.0 PingDataGovernance 8.1.0.0 PingDataGovernance 8.1.0.0 PAP PingDataSync 8.1.0.0 PingCentral 1.4.0","title":"New Product Versions"},{"location":"releaseNotes/2006/#improvements","text":"Liveness Check We've made improvements to PingDirectory's liveness check to better inform dependant services on the status of the Directory service. Docker Build Pipeline We've published Documentation on how to build a Ping Identity Docker Image using a local zip artifact. We have improved our reference pipeline to allow for the build of a single product. We've made several CI/CD enhancements to improve Image qualification (smoke/integration tests). Configuration Substitution We've made enhancements to explicitly send the variables to be substituted.","title":"Improvements"},{"location":"releaseNotes/2006/#resolved-defects","text":"(GDO-218) Resolved an issue where PingDirectory threw an error on manage-profile during setup. (GDO-289) Resolved an issue where Alpine based image couldn't install pip3. (GDO-329) Resolved an issue where PingCentral docs were not syncing to GitHub.","title":"Resolved Defects"},{"location":"releaseNotes/2007/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2007 (July 2020) \u00b6 New Features \u00b6 Signed Docker Images All DockerHub Images are now signed and conform to the Docker Content Trust Specification . Variablize PingAccess Ports We've updated the PingAccess start up hooks to allow users to customize application ports. PingAccess Upgrade Utility The PingAccess upgrade utility is now part of Docker Image. Certificate Management Add consistency and flexibility with the injection of certs/pins. Docker Image Startup Flexibility We've added the ability for end users to customize the startup sequence for Docker Images using pre and post hooks. See our Documentation for implementation details. Improvements \u00b6 Docker Build Pipeline We've made several CI/CD enhancements to improve Image qualification (smoke/integration tests). Resolved Defects \u00b6 (GDO-345) Resolved issue where PingDelegator was using PRIVATE rather than PUBLIC hostnames. (GDO-346) Resolved issue regarding the default minimum heap for PingDirectory. (GDO-380) Resolved issue within PingAccess Clustering (Admin Console) Kubernetes examples. (GDO-371) Resolved issue where PingDelegator wouldn't start using non-privileged user.","title":"Version 2007"},{"location":"releaseNotes/2007/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2007/#devops-docker-builds-version-2007-july-2020","text":"","title":"DevOps Docker Builds, Version 2007 (July 2020)"},{"location":"releaseNotes/2007/#new-features","text":"Signed Docker Images All DockerHub Images are now signed and conform to the Docker Content Trust Specification . Variablize PingAccess Ports We've updated the PingAccess start up hooks to allow users to customize application ports. PingAccess Upgrade Utility The PingAccess upgrade utility is now part of Docker Image. Certificate Management Add consistency and flexibility with the injection of certs/pins. Docker Image Startup Flexibility We've added the ability for end users to customize the startup sequence for Docker Images using pre and post hooks. See our Documentation for implementation details.","title":"New Features"},{"location":"releaseNotes/2007/#improvements","text":"Docker Build Pipeline We've made several CI/CD enhancements to improve Image qualification (smoke/integration tests).","title":"Improvements"},{"location":"releaseNotes/2007/#resolved-defects","text":"(GDO-345) Resolved issue where PingDelegator was using PRIVATE rather than PUBLIC hostnames. (GDO-346) Resolved issue regarding the default minimum heap for PingDirectory. (GDO-380) Resolved issue within PingAccess Clustering (Admin Console) Kubernetes examples. (GDO-371) Resolved issue where PingDelegator wouldn't start using non-privileged user.","title":"Resolved Defects"},{"location":"releaseNotes/2008/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2008 (August 2020) \u00b6 New Features \u00b6 Secret Management A number of key enhancements have been made to natively support secret management within our Docker Images. See Documentation for implementation details. DevOps Development Mode We've added a 'Continue on Failure' option to all Docker Images. This allows the Container to say alive while any potential issues are being investigated. DevOps Program Registration Signing up for the Ping DevOps program is now self-service! Simply follow the instructions found Here . Improvements \u00b6 Ping-DevOps Utility We've added secret management commands to ping-devops, allowing you to quickly integrate secrets into your deployments. Image Restart State A number of enhancements have been made to improve the overall restart flow in our Docker Images. Resolved Defects \u00b6 (GDO-352) Resolved restart issue in PingDataGovernance PAP. (GDO-392) Resolved issue within PingDelegator when DS_PORT variable was undefined. (GDO-395) Resolved issue within PingDirectory restart when Java versions changed. (GDO-397) Resolved issue where PingFederate failed to start in Kubernetes using the full-stack example. (GDO-404) Resolved issue where some users were unable to log into the PingAccess console using the Image edge tag and Baseline server profile.","title":"Version 2008"},{"location":"releaseNotes/2008/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2008/#devops-docker-builds-version-2008-august-2020","text":"","title":"DevOps Docker Builds, Version 2008 (August 2020)"},{"location":"releaseNotes/2008/#new-features","text":"Secret Management A number of key enhancements have been made to natively support secret management within our Docker Images. See Documentation for implementation details. DevOps Development Mode We've added a 'Continue on Failure' option to all Docker Images. This allows the Container to say alive while any potential issues are being investigated. DevOps Program Registration Signing up for the Ping DevOps program is now self-service! Simply follow the instructions found Here .","title":"New Features"},{"location":"releaseNotes/2008/#improvements","text":"Ping-DevOps Utility We've added secret management commands to ping-devops, allowing you to quickly integrate secrets into your deployments. Image Restart State A number of enhancements have been made to improve the overall restart flow in our Docker Images.","title":"Improvements"},{"location":"releaseNotes/2008/#resolved-defects","text":"(GDO-352) Resolved restart issue in PingDataGovernance PAP. (GDO-392) Resolved issue within PingDelegator when DS_PORT variable was undefined. (GDO-395) Resolved issue within PingDirectory restart when Java versions changed. (GDO-397) Resolved issue where PingFederate failed to start in Kubernetes using the full-stack example. (GDO-404) Resolved issue where some users were unable to log into the PingAccess console using the Image edge tag and Baseline server profile.","title":"Resolved Defects"},{"location":"releaseNotes/2009/","text":"Release Notes \u00b6 Devops Docker Builds, Version 2009 (September 2020) \u00b6 New Features \u00b6 PingFederate Multi-region Clustering We've published our Reference Architecture for deploying PingFederate across multiple AWS regions using Kubernetes. PingDataSync Clustering Within PingDataSync 8.2.0.0-EA we've introduced clustering, ensuring your deployment is highly available. Certificate Management Usage We've added documentation for DevOps Certificate Management . PingAccess Release \u00b6 PingAccess 6.1.2 is now available using edge , latest and 2009 image tags Product Betas and Release Candidates \u00b6 Looking to see what the next official product release will contain? Start using the beta and early access builds today. PingFederate 10.2.0-Beta PingAccess 6.2.0-Beta PingDirectory 8.2.0.0-EA PingDirectoryProxy 8.2.0.0-EA PingDataGovernance 8.2.0.0-EA PingDataGovernance 8.2.0.0-EA PAP PingDataSync 8.2.0.0-EA Improvements \u00b6 Image Hardening We've updated our Image hardening Guide to help secure your production deployments.","title":"Version 2009"},{"location":"releaseNotes/2009/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2009/#devops-docker-builds-version-2009-september-2020","text":"","title":"Devops Docker Builds, Version 2009 (September 2020)"},{"location":"releaseNotes/2009/#new-features","text":"PingFederate Multi-region Clustering We've published our Reference Architecture for deploying PingFederate across multiple AWS regions using Kubernetes. PingDataSync Clustering Within PingDataSync 8.2.0.0-EA we've introduced clustering, ensuring your deployment is highly available. Certificate Management Usage We've added documentation for DevOps Certificate Management .","title":"New Features"},{"location":"releaseNotes/2009/#pingaccess-release","text":"PingAccess 6.1.2 is now available using edge , latest and 2009 image tags","title":"PingAccess Release"},{"location":"releaseNotes/2009/#product-betas-and-release-candidates","text":"Looking to see what the next official product release will contain? Start using the beta and early access builds today. PingFederate 10.2.0-Beta PingAccess 6.2.0-Beta PingDirectory 8.2.0.0-EA PingDirectoryProxy 8.2.0.0-EA PingDataGovernance 8.2.0.0-EA PingDataGovernance 8.2.0.0-EA PAP PingDataSync 8.2.0.0-EA","title":"Product Betas and Release Candidates"},{"location":"releaseNotes/2009/#improvements","text":"Image Hardening We've updated our Image hardening Guide to help secure your production deployments.","title":"Improvements"},{"location":"releaseNotes/2010/","text":"Release Notes \u00b6 Devops Docker Builds, Version 2010 (October 2020) \u00b6 New Features \u00b6 PingIdentity Helm Charts Looking to deploy the PingDevOps stack into your Kubernetes cluster? We've published our Helm Charts to help streamline deployment. PingIntelligence (ASE) Docker Image PingIntelligence (ASE) is now available on DockerHub! Pull the 4.3 ASE image Here . PingFederate Bulk API Configuration Management We've added tooling and documentation for managing PingFederate configuration using the build API export and import. View the latest documentation Here . Enhancements \u00b6 PingFederate Version 10.0.6 now available. Image now includes tcp.xml.subst for cluster parameterization. Updated image to support easier enablement/use of Bouncy Castle FIPS provider with PingFederate. PingAccess Version 6.1.3 is now available. LDAP SDK Updated to version 5.1.1 ping-devops CLI Added functionality to generate K8s license and version secret directly from the evaluation license service. Added ACCEPT_EULA value to K8s devops-secret. Resolved Defects \u00b6 (GDO-411) Resolved issue where access token was logged when using private Git repository. (GDO-444) Resolved PingDirectory issue with keystore exception on restart. (GDO-491) Removed GPG from base Docker image. (GDO-495) Removed gosu from base Docker image. (GDO-513) Resolved issue with replication topology list on PingDirectory restart.","title":"Version 2010"},{"location":"releaseNotes/2010/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2010/#devops-docker-builds-version-2010-october-2020","text":"","title":"Devops Docker Builds, Version 2010 (October 2020)"},{"location":"releaseNotes/2010/#new-features","text":"PingIdentity Helm Charts Looking to deploy the PingDevOps stack into your Kubernetes cluster? We've published our Helm Charts to help streamline deployment. PingIntelligence (ASE) Docker Image PingIntelligence (ASE) is now available on DockerHub! Pull the 4.3 ASE image Here . PingFederate Bulk API Configuration Management We've added tooling and documentation for managing PingFederate configuration using the build API export and import. View the latest documentation Here .","title":"New Features"},{"location":"releaseNotes/2010/#enhancements","text":"PingFederate Version 10.0.6 now available. Image now includes tcp.xml.subst for cluster parameterization. Updated image to support easier enablement/use of Bouncy Castle FIPS provider with PingFederate. PingAccess Version 6.1.3 is now available. LDAP SDK Updated to version 5.1.1 ping-devops CLI Added functionality to generate K8s license and version secret directly from the evaluation license service. Added ACCEPT_EULA value to K8s devops-secret.","title":"Enhancements"},{"location":"releaseNotes/2010/#resolved-defects","text":"(GDO-411) Resolved issue where access token was logged when using private Git repository. (GDO-444) Resolved PingDirectory issue with keystore exception on restart. (GDO-491) Removed GPG from base Docker image. (GDO-495) Removed gosu from base Docker image. (GDO-513) Resolved issue with replication topology list on PingDirectory restart.","title":"Resolved Defects"},{"location":"releaseNotes/2011/","text":"Release Notes \u00b6 Devops Docker Builds, Version 2011 (November 2020) \u00b6 New Features \u00b6 Internal XRay Scanning We've automated the process to scan all Sprint Release Docker Images for CVE's Enhancements \u00b6 PingFederate Version 10.1.3 now available. Parameterized run.properties, ldap.properties and tcp.xml now included in Docker Image Helm Charts We added a number of enhancements to our Helm charts. See the Helm Release Notes for details. Misc. Updated EULA check to be case insensitive Add Java back into pingtoolkit Image Updated example docker run commands in Dockerfile documentation Info message when Server Profile URLs are not present Resolved Defects \u00b6 (GDO-549) - Resolved issue where SCIM Swagger test pages don't work in PingDataGovernance Docker Image (GDO-567) - Resolved issue where changes made to PingDirectory's java.properties were erased on container restart (GDO-599) - Change wait-for localhost to use IP address (GDO-604) - Modified simple-sync server profile to work in Kubernetes environment with different service names (GDO-606) - Resolved issue where copy of server bits throws errors when running under non-root security context","title":"Version 2011"},{"location":"releaseNotes/2011/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2011/#devops-docker-builds-version-2011-november-2020","text":"","title":"Devops Docker Builds, Version 2011 (November 2020)"},{"location":"releaseNotes/2011/#new-features","text":"Internal XRay Scanning We've automated the process to scan all Sprint Release Docker Images for CVE's","title":"New Features"},{"location":"releaseNotes/2011/#enhancements","text":"PingFederate Version 10.1.3 now available. Parameterized run.properties, ldap.properties and tcp.xml now included in Docker Image Helm Charts We added a number of enhancements to our Helm charts. See the Helm Release Notes for details. Misc. Updated EULA check to be case insensitive Add Java back into pingtoolkit Image Updated example docker run commands in Dockerfile documentation Info message when Server Profile URLs are not present","title":"Enhancements"},{"location":"releaseNotes/2011/#resolved-defects","text":"(GDO-549) - Resolved issue where SCIM Swagger test pages don't work in PingDataGovernance Docker Image (GDO-567) - Resolved issue where changes made to PingDirectory's java.properties were erased on container restart (GDO-599) - Change wait-for localhost to use IP address (GDO-604) - Modified simple-sync server profile to work in Kubernetes environment with different service names (GDO-606) - Resolved issue where copy of server bits throws errors when running under non-root security context","title":"Resolved Defects"},{"location":"releaseNotes/2012/","text":"Release Notes \u00b6 Devops Docker Builds, Version 2012 (December 2020) \u00b6 New Features \u00b6 DevOps Documentation We've moved from GitBook to MKDocs to provide a richer DevOps documentation experience. Enhancements \u00b6 PingFederate Version 10.2 now available. PingAccess Version 6.2 is now available. PingDirectory Version 8.2.0 is now available. PingDataGovernance Version 8.2.0 is now available. PingDataSync Version 8.2.0 is now available. PingCentral Version 1.6.0 is now available. LDAP SDK Version 5.1.3 is now available. Updated to latest Tomcat version. PingData Console SSO Example We've provided an example of running the Admin Console in Docker with SSO configured. Resolved Defects \u00b6 (GDO-362) Resolved issue where PingDirectory instances become active prior to being fully synchronized. (GDO-502) Resolved potential vulnerability by updating Ping Data products to Spring Framework v4.3.29. (GDO-544) Resolved issue where PingDataGovernance PAP images' MAX_HEAP_SIZE variable had no effect. (GDO-618) Resolved issue where base layer was missing JMX agent. (GDO-640) Resolved issue where wait-for command didn't honor timeout when waiting for host:port. Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.0 6.1.3 6.0.4 PingCentral 1.6.0 1.5.0 PingDataConsole 8.2.0.0 8.1.0.0 8.0.0.1 PingDataGovernance 8.2.0.0 8.1.0.0 8.0.0.1 PingDataGovernance PAP 8.2.0.0 8.1.0.0 8.0.0.1 PingDataSync 8.2.0.0 8.1.0.0 8.0.0.1 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.0 8.1.0.0 8.0.0.1 PingDirectoryProxy 8.2.0.0 8.1.0.0 8.0.0.1 PingFederate 10.2.0 10.1.3 10.1.2 PingIntelligence 4.4 4.3 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2012"},{"location":"releaseNotes/2012/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2012/#devops-docker-builds-version-2012-december-2020","text":"","title":"Devops Docker Builds, Version 2012 (December 2020)"},{"location":"releaseNotes/2012/#new-features","text":"DevOps Documentation We've moved from GitBook to MKDocs to provide a richer DevOps documentation experience.","title":"New Features"},{"location":"releaseNotes/2012/#enhancements","text":"PingFederate Version 10.2 now available. PingAccess Version 6.2 is now available. PingDirectory Version 8.2.0 is now available. PingDataGovernance Version 8.2.0 is now available. PingDataSync Version 8.2.0 is now available. PingCentral Version 1.6.0 is now available. LDAP SDK Version 5.1.3 is now available. Updated to latest Tomcat version. PingData Console SSO Example We've provided an example of running the Admin Console in Docker with SSO configured.","title":"Enhancements"},{"location":"releaseNotes/2012/#resolved-defects","text":"(GDO-362) Resolved issue where PingDirectory instances become active prior to being fully synchronized. (GDO-502) Resolved potential vulnerability by updating Ping Data products to Spring Framework v4.3.29. (GDO-544) Resolved issue where PingDataGovernance PAP images' MAX_HEAP_SIZE variable had no effect. (GDO-618) Resolved issue where base layer was missing JMX agent. (GDO-640) Resolved issue where wait-for command didn't honor timeout when waiting for host:port.","title":"Resolved Defects"},{"location":"releaseNotes/2012/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.0 6.1.3 6.0.4 PingCentral 1.6.0 1.5.0 PingDataConsole 8.2.0.0 8.1.0.0 8.0.0.1 PingDataGovernance 8.2.0.0 8.1.0.0 8.0.0.1 PingDataGovernance PAP 8.2.0.0 8.1.0.0 8.0.0.1 PingDataSync 8.2.0.0 8.1.0.0 8.0.0.1 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.0 8.1.0.0 8.0.0.1 PingDirectoryProxy 8.2.0.0 8.1.0.0 8.0.0.1 PingFederate 10.2.0 10.1.3 10.1.2 PingIntelligence 4.4 4.3 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2101/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2101 (January 2021) \u00b6 Enhancements \u00b6 PingFederate Versions 10.2.1 and 10.1.4 are now available. PingDirectory Versions 8.2.0.1 and 8.1.0.3 are now available. PingDirectory now delays its readiness state until replication has completed (Kubernetes). Improved container restart time by regenerating java.properties only when changes are made to JVM or JVM options. PingDataGovernance Versions 8.2.0.1 and 8.1.0.3 are now available. PingDataSync Versions 8.2.0.1 and 8.1.0.3 are now available. PingDelegator 4.4.1 Version 4.4.1 is now available. LDAP SDK Version 5.1.3 is now available. Container Secrets Sourcing of secret_envs is now recursive. Resolved Defects \u00b6 (GDO-577) - Resolved issue to suppress environment variables in cn=monitor for PingData products. (GDO-658) - Enhanced error messages returned by the evaluation license service. (GDO-659) - Resolved issue where evaluation license server used incorrect calculation for checking image expiration. (GDO-668) - Resolved issue where remnants of previous server profile remained in place when restarting a container. (GDO-674) - Resolved issue where hashing contents of the SECRETS_DIR risked leaving passwords stored insecurely on the container filesystem. Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.0 6.1.3 PingCentral 1.6.0 1.5.0 PingDataConsole 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDataGovernance 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDataGovernance PAP 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDataSync 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDirectoryProxy 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingFederate 10.2.1 10.1.4 10.2.0 10.1.3 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2101"},{"location":"releaseNotes/2101/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2101/#devops-docker-builds-version-2101-january-2021","text":"","title":"DevOps Docker Builds, Version 2101 (January 2021)"},{"location":"releaseNotes/2101/#enhancements","text":"PingFederate Versions 10.2.1 and 10.1.4 are now available. PingDirectory Versions 8.2.0.1 and 8.1.0.3 are now available. PingDirectory now delays its readiness state until replication has completed (Kubernetes). Improved container restart time by regenerating java.properties only when changes are made to JVM or JVM options. PingDataGovernance Versions 8.2.0.1 and 8.1.0.3 are now available. PingDataSync Versions 8.2.0.1 and 8.1.0.3 are now available. PingDelegator 4.4.1 Version 4.4.1 is now available. LDAP SDK Version 5.1.3 is now available. Container Secrets Sourcing of secret_envs is now recursive.","title":"Enhancements"},{"location":"releaseNotes/2101/#resolved-defects","text":"(GDO-577) - Resolved issue to suppress environment variables in cn=monitor for PingData products. (GDO-658) - Enhanced error messages returned by the evaluation license service. (GDO-659) - Resolved issue where evaluation license server used incorrect calculation for checking image expiration. (GDO-668) - Resolved issue where remnants of previous server profile remained in place when restarting a container. (GDO-674) - Resolved issue where hashing contents of the SECRETS_DIR risked leaving passwords stored insecurely on the container filesystem.","title":"Resolved Defects"},{"location":"releaseNotes/2101/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.0 6.1.3 PingCentral 1.6.0 1.5.0 PingDataConsole 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDataGovernance 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDataGovernance PAP 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDataSync 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingDirectoryProxy 8.2.0.1 8.1.0.3 8.2.0.0 8.1.0.0 PingFederate 10.2.1 10.1.4 10.2.0 10.1.3 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2102/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2102 (February 2021) \u00b6 Enhancements \u00b6 PingFederate Support for creation and loading of certificates for admin. Version 10.2.2 is now available. PingAccess Baseline now has clustering support. Version 6.1.4 is now available. PingDirectory Improve speed of replace-profile process during PingDirectory restart. Indexes are automatically rebuilt upon server restart. Version 8.2.0.2 is now available. PingDataGovernance Helm charts have been added for the PingDataGovernance policy editor. Version 8.2.0.2 is now available. PingDataSync Version 8.2.0.2 is now available. Resolved Defects \u00b6 (GDO-382) - Resolved issue where PingDirectory is unable to restart when upgrading 7.3 to 8.1 due to a license error. (GDO-543) - Updated \"Related Docker Images\" documentation in PAP Dockerfile. (GDO-672) - Resolved issue with 'manage-profile setup' signaling a dsconfig error. (GDO-680) - Resolved issue with PingDirectory set_server_available and set_server_unavailable methods being very. (GDO-311) - Updated 05-expand-templates.sh to no longer build data.zip if a data.zip directory is found in the profile. Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.0 6.1.4 6.1.3 PingCentral 1.6.0 1.5.0 PingDataConsole 8.2.0.2 8.1.0.3 8.2.0.1 PingDataGovernance 8.2.0.2 8.1.0.3 8.2.0.1 PingDataGovernance PAP 8.2.0.2 8.1.0.3 8.2.0.1 PingDataSync 8.2.0.2 8.1.0.3 8.2.0.1 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.2 8.1.0.3 8.2.0.1 PingDirectoryProxy 8.2.0.2 8.1.0.3 8.2.0.1 PingFederate 10.2.2 10.1.4 10.2.1 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2102"},{"location":"releaseNotes/2102/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2102/#devops-docker-builds-version-2102-february-2021","text":"","title":"DevOps Docker Builds, Version 2102 (February 2021)"},{"location":"releaseNotes/2102/#enhancements","text":"PingFederate Support for creation and loading of certificates for admin. Version 10.2.2 is now available. PingAccess Baseline now has clustering support. Version 6.1.4 is now available. PingDirectory Improve speed of replace-profile process during PingDirectory restart. Indexes are automatically rebuilt upon server restart. Version 8.2.0.2 is now available. PingDataGovernance Helm charts have been added for the PingDataGovernance policy editor. Version 8.2.0.2 is now available. PingDataSync Version 8.2.0.2 is now available.","title":"Enhancements"},{"location":"releaseNotes/2102/#resolved-defects","text":"(GDO-382) - Resolved issue where PingDirectory is unable to restart when upgrading 7.3 to 8.1 due to a license error. (GDO-543) - Updated \"Related Docker Images\" documentation in PAP Dockerfile. (GDO-672) - Resolved issue with 'manage-profile setup' signaling a dsconfig error. (GDO-680) - Resolved issue with PingDirectory set_server_available and set_server_unavailable methods being very. (GDO-311) - Updated 05-expand-templates.sh to no longer build data.zip if a data.zip directory is found in the profile.","title":"Resolved Defects"},{"location":"releaseNotes/2102/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.0 6.1.4 6.1.3 PingCentral 1.6.0 1.5.0 PingDataConsole 8.2.0.2 8.1.0.3 8.2.0.1 PingDataGovernance 8.2.0.2 8.1.0.3 8.2.0.1 PingDataGovernance PAP 8.2.0.2 8.1.0.3 8.2.0.1 PingDataSync 8.2.0.2 8.1.0.3 8.2.0.1 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.2 8.1.0.3 8.2.0.1 PingDirectoryProxy 8.2.0.2 8.1.0.3 8.2.0.1 PingFederate 10.2.2 10.1.4 10.2.1 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2103/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2103 (March 2021) \u00b6 New Features \u00b6 Images run as non-privileged user by default Critical: We've greatly improved the security of our images by having them run as a non-privileged user by default. See Migrating to Unprivileged Images for information about migrating existing deployments. Layer simplification We've consolidated layers in our images where possible. Enhancements \u00b6 PingFederate The baseline image now uses data.json instead of the former use of the /data folder. New variables have been added to run.properties for controlling provisioning failover and grace period. Versions 10.1.5 and 10.3-Beta are now available. PingAccess Versions 6.2.1 and 6.3-Beta are now available. PingCentral Versions 1.7.0 is now available. PingDirectory The number of layers present in the image has been reduced and simplified. Version 8.2.0.3 is now available. PingDataGovernance Version 8.2.0.3 is now available. PingDataSync Version 8.2.0.3 is now available. Resolved Defects \u00b6 (GDO-742) - Resolved issue which may cause permissions errors creating files under /run/secrets during PingDirectory setup (GDO-746) - Resolved issue in which PingDirectory cannot rejoin its replication topology after restart (GDO-749) - Addressed documentation issue in which bulleted lists are not printed correctly Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.1 6.1.4 6.2.0 PingCentral 1.7.0 1.6.0 1.5.0 PingDataConsole 8.2.0.3 8.1.0.3 8.2.0.2 PingDataGovernance 8.2.0.3 8.1.0.3 8.2.0.2 PingDataGovernance PAP 8.2.0.3 8.1.0.3 8.2.0.2 PingDataSync 8.2.0.3 8.1.0.3 8.2.0.2 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.3 8.1.0.3 8.2.0.2 PingDirectoryProxy 8.2.0.3 8.1.0.3 8.2.0.2 PingFederate 10.2.2 10.1.5 10.1.4 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2103"},{"location":"releaseNotes/2103/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2103/#devops-docker-builds-version-2103-march-2021","text":"","title":"DevOps Docker Builds, Version 2103 (March 2021)"},{"location":"releaseNotes/2103/#new-features","text":"Images run as non-privileged user by default Critical: We've greatly improved the security of our images by having them run as a non-privileged user by default. See Migrating to Unprivileged Images for information about migrating existing deployments. Layer simplification We've consolidated layers in our images where possible.","title":"New Features"},{"location":"releaseNotes/2103/#enhancements","text":"PingFederate The baseline image now uses data.json instead of the former use of the /data folder. New variables have been added to run.properties for controlling provisioning failover and grace period. Versions 10.1.5 and 10.3-Beta are now available. PingAccess Versions 6.2.1 and 6.3-Beta are now available. PingCentral Versions 1.7.0 is now available. PingDirectory The number of layers present in the image has been reduced and simplified. Version 8.2.0.3 is now available. PingDataGovernance Version 8.2.0.3 is now available. PingDataSync Version 8.2.0.3 is now available.","title":"Enhancements"},{"location":"releaseNotes/2103/#resolved-defects","text":"(GDO-742) - Resolved issue which may cause permissions errors creating files under /run/secrets during PingDirectory setup (GDO-746) - Resolved issue in which PingDirectory cannot rejoin its replication topology after restart (GDO-749) - Addressed documentation issue in which bulleted lists are not printed correctly","title":"Resolved Defects"},{"location":"releaseNotes/2103/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.1 6.1.4 6.2.0 PingCentral 1.7.0 1.6.0 1.5.0 PingDataConsole 8.2.0.3 8.1.0.3 8.2.0.2 PingDataGovernance 8.2.0.3 8.1.0.3 8.2.0.2 PingDataGovernance PAP 8.2.0.3 8.1.0.3 8.2.0.2 PingDataSync 8.2.0.3 8.1.0.3 8.2.0.2 PingDelegator 4.4.0 4.2.1 PingDirectory 8.2.0.3 8.1.0.3 8.2.0.2 PingDirectoryProxy 8.2.0.3 8.1.0.3 8.2.0.2 PingFederate 10.2.2 10.1.5 10.1.4 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2104/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2104 (April 2021) \u00b6 New Features \u00b6 Early Access and Beta Release Docker Images PingAccess 6.3.0-Beta PingAuthorize 8.3.0.0-EA PingAuthorize PAP 8.3.0.0-EA PingDataConsole 8.3.0.0-EA PingDataSync 8.3.0.0-EA PingDirectory 8.3.0.0-EA PingDirectoryProxy 8.3.0.0-EA PingFederate 10.3.0-Beta Enhancements \u00b6 watch-fs-changes We've updated the watch-fs-changes utility to accept command-line parameters to watch additional locations Startup Time Performance We've updated the start-server.sh script to improve container start up times for all PingData products. Helm Charts for PingDirectoryProxy PingDirectoryProxy has been integrated into Ping's Helm Charts Resolved Defects \u00b6 (GDO-649) - Resolved issue where the provided self-signed certificates for PingDataConsole didn't function in Chrome on MacOS (GDO-770) - Resolved issue where PingDataConsole didn't log console messages by default (GDO-773) - Resolved issue where the collect-support-data tool couldn't find the required JDK Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.1 6.1.4 PingCentral 1.7.0 1.6.0 PingDataConsole 8.2.0.3 8.1.0.3 PingDataGovernance 8.2.0.3 8.1.0.3 PingDataGovernance PAP 8.2.0.3 8.1.0.3 PingDataSync 8.2.0.3 8.1.0.3 PingDelegator 4.4.0 PingDirectory 8.2.0.3 8.1.0.3 PingDirectoryProxy 8.2.0.3 8.1.0.3 PingFederate 10.2.2 10.1.5 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2104"},{"location":"releaseNotes/2104/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2104/#devops-docker-builds-version-2104-april-2021","text":"","title":"DevOps Docker Builds, Version 2104 (April 2021)"},{"location":"releaseNotes/2104/#new-features","text":"Early Access and Beta Release Docker Images PingAccess 6.3.0-Beta PingAuthorize 8.3.0.0-EA PingAuthorize PAP 8.3.0.0-EA PingDataConsole 8.3.0.0-EA PingDataSync 8.3.0.0-EA PingDirectory 8.3.0.0-EA PingDirectoryProxy 8.3.0.0-EA PingFederate 10.3.0-Beta","title":"New Features"},{"location":"releaseNotes/2104/#enhancements","text":"watch-fs-changes We've updated the watch-fs-changes utility to accept command-line parameters to watch additional locations Startup Time Performance We've updated the start-server.sh script to improve container start up times for all PingData products. Helm Charts for PingDirectoryProxy PingDirectoryProxy has been integrated into Ping's Helm Charts","title":"Enhancements"},{"location":"releaseNotes/2104/#resolved-defects","text":"(GDO-649) - Resolved issue where the provided self-signed certificates for PingDataConsole didn't function in Chrome on MacOS (GDO-770) - Resolved issue where PingDataConsole didn't log console messages by default (GDO-773) - Resolved issue where the collect-support-data tool couldn't find the required JDK","title":"Resolved Defects"},{"location":"releaseNotes/2104/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.2.1 6.1.4 PingCentral 1.7.0 1.6.0 PingDataConsole 8.2.0.3 8.1.0.3 PingDataGovernance 8.2.0.3 8.1.0.3 PingDataGovernance PAP 8.2.0.3 8.1.0.3 PingDataSync 8.2.0.3 8.1.0.3 PingDelegator 4.4.0 PingDirectory 8.2.0.3 8.1.0.3 PingDirectoryProxy 8.2.0.3 8.1.0.3 PingFederate 10.2.2 10.1.5 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2105/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2105 (June 3 2021) \u00b6 New Features \u00b6 PingFederate PingFederate 10.2.3 is now available on Dockerhub PingDelegator PingDelegator 4.5.0 is now available on Dockerhub Resolved Defects \u00b6 (GDO-813) - Resolved issue where OAuth APIS were broken using baseline server profile and pingfederate:edge (GDO-818) - Resolved issue where users were unable to build images locally due to a file permission error (GDO-829) - Resolved issue where a dsconfig command was unable to run due to a quoting error Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.3.0-Beta 6.2.1 6.1.4 PingCentral 1.7.0 1.6.0 PingDataConsole 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDataGovernance 8.2.0.3 8.1.0.3 PingDataGovernance PAP 8.2.0.3 8.1.0.3 PingDataSync 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDelegator 4.5.0 4.4.1 4.2.1 PingDirectory 8.3.0.0-EA 8.2.0.4 8.2.0.3 8.1.0.3 PingDirectoryProxy 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingFederate 10.3.0-Beta 10.2.3 10.1.5 10.2.2 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2105"},{"location":"releaseNotes/2105/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2105/#devops-docker-builds-version-2105-june-3-2021","text":"","title":"DevOps Docker Builds, Version 2105 (June 3 2021)"},{"location":"releaseNotes/2105/#new-features","text":"PingFederate PingFederate 10.2.3 is now available on Dockerhub PingDelegator PingDelegator 4.5.0 is now available on Dockerhub","title":"New Features"},{"location":"releaseNotes/2105/#resolved-defects","text":"(GDO-813) - Resolved issue where OAuth APIS were broken using baseline server profile and pingfederate:edge (GDO-818) - Resolved issue where users were unable to build images locally due to a file permission error (GDO-829) - Resolved issue where a dsconfig command was unable to run due to a quoting error","title":"Resolved Defects"},{"location":"releaseNotes/2105/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.3.0-Beta 6.2.1 6.1.4 PingCentral 1.7.0 1.6.0 PingDataConsole 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDataGovernance 8.2.0.3 8.1.0.3 PingDataGovernance PAP 8.2.0.3 8.1.0.3 PingDataSync 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDelegator 4.5.0 4.4.1 4.2.1 PingDirectory 8.3.0.0-EA 8.2.0.4 8.2.0.3 8.1.0.3 PingDirectoryProxy 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingFederate 10.3.0-Beta 10.2.3 10.1.5 10.2.2 PingIntelligence 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2106/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2106 (July 6 2021) \u00b6 New Features \u00b6 ARM-Based Images Ping Identity now offers ARM-based Docker images! These images are currently experimental and are not intended for production deployment View the available tags on Dockerhub PingFederate PingFederate 10.3.0 and 10.2.4 are now available on Dockerhub PingAccess PingAccess 6.3.0 is now available on Dockerhub PingDirectory PingDirectory 8.3.0 and 8.2.0.5 are now available on Dockerhub PingAuthorize PingAuthorize 8.3.0 is now available on Dockerhub PingCentral PingCentral 1.8 is now available on Dockerhub PingDelegator PingDelegator 4.6.0 is now available on Dockerhub PingIntelligence (ASE) PingIntelligence 5.0 is now available on Dockerhub LDAP SDK LDAP SDK 6.0.0 is now available on Dockerhub Enhancements \u00b6 PingFederate Allow logging level to be set via an environment variable (PF_LOG_LEVEL) Added property pf.admin.baseurl to run.properties configuration file Added ability to generate the run.properties and jvm-memory.options files based on supplied environment variables HEAP Awareness PingAccess, PingCentral, and JMeter images can now calculate the heap based on the memory allocated to the container Java Tools Added jcmd, jstat, jinfo, jmap, jps, jstack tools to images Docker-Compose Added tmpfs secrets directory to all of the docker-compose examples in the Getting-Started repository Resolved Defects \u00b6 (GDO-657) - Resolved PingDelegator self-signed certificate issue (GDO-834) - Resolved issue where PingDataConsole doesn't build correctly when providing a local product.zip file (GDO-836) - Resolved issue where PingDirectory restart failed due to startup hook syntax error (GDO-885) - Resolved HTTPS/LDAPS port variables in PingAuthorize profiles to support Helm charts Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.3.0 6.2.1 6.3.0-Beta 6.1.4 PingAuthorize 8.3.0.0 PingAuthorize PAP 8.3.0.0 PingCentral 1.8.0 1.7.0 1.6.0 PingDataConsole 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDataGovernance 8.2.0.5 8.2.0.3 8.1.0.3 PingDataGovernance PAP 8.2.0.5 8.2.0.3 8.1.0.3 PingDataSync 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDelegator 4.6.0 4.4.1 4.5.0 4.4.1 4.2.1 PingDirectory 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDirectoryProxy 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingFederate 10.3.0 10.2.4 10.3.0-Beta 10.2.3 10.1.5 PingIntelligence 5.0 4.4.1 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Version 2106"},{"location":"releaseNotes/2106/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2106/#devops-docker-builds-version-2106-july-6-2021","text":"","title":"DevOps Docker Builds, Version 2106 (July 6 2021)"},{"location":"releaseNotes/2106/#new-features","text":"ARM-Based Images Ping Identity now offers ARM-based Docker images! These images are currently experimental and are not intended for production deployment View the available tags on Dockerhub PingFederate PingFederate 10.3.0 and 10.2.4 are now available on Dockerhub PingAccess PingAccess 6.3.0 is now available on Dockerhub PingDirectory PingDirectory 8.3.0 and 8.2.0.5 are now available on Dockerhub PingAuthorize PingAuthorize 8.3.0 is now available on Dockerhub PingCentral PingCentral 1.8 is now available on Dockerhub PingDelegator PingDelegator 4.6.0 is now available on Dockerhub PingIntelligence (ASE) PingIntelligence 5.0 is now available on Dockerhub LDAP SDK LDAP SDK 6.0.0 is now available on Dockerhub","title":"New Features"},{"location":"releaseNotes/2106/#enhancements","text":"PingFederate Allow logging level to be set via an environment variable (PF_LOG_LEVEL) Added property pf.admin.baseurl to run.properties configuration file Added ability to generate the run.properties and jvm-memory.options files based on supplied environment variables HEAP Awareness PingAccess, PingCentral, and JMeter images can now calculate the heap based on the memory allocated to the container Java Tools Added jcmd, jstat, jinfo, jmap, jps, jstack tools to images Docker-Compose Added tmpfs secrets directory to all of the docker-compose examples in the Getting-Started repository","title":"Enhancements"},{"location":"releaseNotes/2106/#resolved-defects","text":"(GDO-657) - Resolved PingDelegator self-signed certificate issue (GDO-834) - Resolved issue where PingDataConsole doesn't build correctly when providing a local product.zip file (GDO-836) - Resolved issue where PingDirectory restart failed due to startup hook syntax error (GDO-885) - Resolved HTTPS/LDAPS port variables in PingAuthorize profiles to support Helm charts","title":"Resolved Defects"},{"location":"releaseNotes/2106/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.3.0 6.2.1 6.3.0-Beta 6.1.4 PingAuthorize 8.3.0.0 PingAuthorize PAP 8.3.0.0 PingCentral 1.8.0 1.7.0 1.6.0 PingDataConsole 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDataGovernance 8.2.0.5 8.2.0.3 8.1.0.3 PingDataGovernance PAP 8.2.0.5 8.2.0.3 8.1.0.3 PingDataSync 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDelegator 4.6.0 4.4.1 4.5.0 4.4.1 4.2.1 PingDirectory 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingDirectoryProxy 8.3.0.0 8.2.0.5 8.3.0.0-EA 8.2.0.3 8.1.0.3 PingFederate 10.3.0 10.2.4 10.3.0-Beta 10.2.3 10.1.5 PingIntelligence 5.0 4.4.1 4.4 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"},{"location":"releaseNotes/2107/","text":"Release Notes \u00b6 DevOps Docker Builds, Version 2107 (August 4 2021) \u00b6 New Features \u00b6 PingFederate Added support for pf.admin.baseurl within baseline Server Profile PingAccess PingAccess 6.2.2 is now available on Dockerhub PingDirectory PingDirectory 8.3.0.1 is now available on Dockerhub PingDirectoryProxy PingDirectoryProxy 8.3.0.1 is now available on Dockerhub PingDataSync PingDirectory 8.3.0.1 is now available on Dockerhub PingAuthorize PingAuthorize 8.3.0.1 is now available on Dockerhub Enhancements \u00b6 PingDelegator Baseline now works on both local and Kubernetes environments Helm Charts Release 0.6.8 - Probes & Ingress Resolved Defects \u00b6 (GDO-860) - Resolved issue where the PingAuthorize Policy Editor auto-generated documentation uses wrong ports (GDO-907) - Restored functionality for prepending the name of the log file to each log line (GDO-887) - All Docker images are now signed Product Build Matrix \u00b6 The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.3.0 6.2.2 6.2.1 PingAuthorize 8.3.0.1 8.3.0.0 PingAuthorize PAP 8.3.0.1 8.3.0.0 PingCentral 1.8.0 1.7.0 PingDataConsole 8.3.0.1 8.2.0.5 8.3.0.0 PingDataGovernance 8.2.0.5 PingDataGovernance PAP 8.2.0.5 PingDataSync 8.3.0.1 8.2.0.5 8.3.0.0 PingDelegator 4.6.0 4.4.1 PingDirectory 8.3.0.1 8.2.0.5 8.3.0.0 PingDirectoryProxy 8.3.0.1 8.2.0.5 8.3.0.0 PingFederate 10.3.0 10.2.4 PingIntelligence 5.0 4.4.1 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Current"},{"location":"releaseNotes/2107/#release-notes","text":"","title":"Release Notes"},{"location":"releaseNotes/2107/#devops-docker-builds-version-2107-august-4-2021","text":"","title":"DevOps Docker Builds, Version 2107 (August 4 2021)"},{"location":"releaseNotes/2107/#new-features","text":"PingFederate Added support for pf.admin.baseurl within baseline Server Profile PingAccess PingAccess 6.2.2 is now available on Dockerhub PingDirectory PingDirectory 8.3.0.1 is now available on Dockerhub PingDirectoryProxy PingDirectoryProxy 8.3.0.1 is now available on Dockerhub PingDataSync PingDirectory 8.3.0.1 is now available on Dockerhub PingAuthorize PingAuthorize 8.3.0.1 is now available on Dockerhub","title":"New Features"},{"location":"releaseNotes/2107/#enhancements","text":"PingDelegator Baseline now works on both local and Kubernetes environments Helm Charts Release 0.6.8 - Probes & Ingress","title":"Enhancements"},{"location":"releaseNotes/2107/#resolved-defects","text":"(GDO-860) - Resolved issue where the PingAuthorize Policy Editor auto-generated documentation uses wrong ports (GDO-907) - Restored functionality for prepending the name of the log file to each log line (GDO-887) - All Docker images are now signed","title":"Resolved Defects"},{"location":"releaseNotes/2107/#product-build-matrix","text":"The following table includes product versions and their accompanying Image build status for this release. Product Active Build Build EOL PingAccess 6.3.0 6.2.2 6.2.1 PingAuthorize 8.3.0.1 8.3.0.0 PingAuthorize PAP 8.3.0.1 8.3.0.0 PingCentral 1.8.0 1.7.0 PingDataConsole 8.3.0.1 8.2.0.5 8.3.0.0 PingDataGovernance 8.2.0.5 PingDataGovernance PAP 8.2.0.5 PingDataSync 8.3.0.1 8.2.0.5 8.3.0.0 PingDelegator 4.6.0 4.4.1 PingDirectory 8.3.0.1 8.2.0.5 8.3.0.0 PingDirectoryProxy 8.3.0.1 8.2.0.5 8.3.0.0 PingFederate 10.3.0 10.2.4 PingIntelligence 5.0 4.4.1 Build Matrix Info Bolded product version number is version within 'latest' image tag. Build EOL denotes product versions that are no longer built as of this release.","title":"Product Build Matrix"}]}